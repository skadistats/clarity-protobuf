option java_package = "skadistats.clarity.wire.shared.common.proto";
option java_outer_classname = "CommonNetworkBaseTypes";

import "network_connection-common.proto";

enum SignonState_t {
  SIGNONSTATE_NONE = 0;
  SIGNONSTATE_CHALLENGE = 1;
  SIGNONSTATE_CONNECTED = 2;
  SIGNONSTATE_NEW = 3;
  SIGNONSTATE_PRESPAWN = 4;
  SIGNONSTATE_SPAWN = 5;
  SIGNONSTATE_FULL = 6;
  SIGNONSTATE_CHANGELEVEL = 7;
}

message CMsgVector {
  optional float x = 1;
  optional float y = 2;
  optional float z = 3;
  optional float w = 4;
}

message CMsgVector2D {
  optional float x = 1;
  optional float y = 2;
}

message CMsgQAngle {
  optional float x = 1;
  optional float y = 2;
  optional float z = 3;
}

message CMsgRGBA {
  optional int32 r = 1;
  optional int32 g = 2;
  optional int32 b = 3;
  optional int32 a = 4;
}

message CMsg_CVars {
  message CVar {
    optional string name = 1;
    optional string value = 2;
    optional uint32 dictionary_name = 3;
  }

  repeated .CMsg_CVars.CVar cvars = 1;
}

message CNETMsg_NOP {
}

message CNETMsg_SplitScreenUser {
  optional int32 slot = 1;
}

message CNETMsg_Disconnect {
  optional string text = 1;
  optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
}

message CNETMsg_File {
  optional int32 transfer_id = 1;
  optional string file_name = 2;
  optional bool is_replay_demo_file = 3;
  optional bool deny = 4;
  optional bool is_file_requested = 5;
}

message CNETMsg_Tick {
  optional uint32 tick = 1;
  optional uint32 host_frametime = 2;
  optional uint32 host_frametime_std_deviation = 3;
  optional uint32 host_computationtime = 4;
  optional uint32 host_computationtime_std_deviation = 5;
  optional uint32 host_framestarttime_std_deviation = 6;
  optional uint32 host_loss = 7;
  optional uint32 host_unfiltered_frametime = 8;
  optional uint32 hltv_replay_flags = 9;
  optional uint32 expected_long_tick = 10;
  optional string expected_long_tick_reason = 11;
  optional uint32 jitter = 12;
}

message CNETMsg_StringCmd {
  optional string command = 1;
  optional uint32 prediction_sync = 2;
}

message CNETMsg_SetConVar {
  optional .CMsg_CVars convars = 1;
}

message CNETMsg_SignonState {
  optional .SignonState_t signon_state = 1 [default = SIGNONSTATE_NONE];
  optional uint32 spawn_count = 2;
  optional uint32 num_server_players = 3;
  repeated string players_networkids = 4;
  optional string map_name = 5;
  optional string addons = 6;
}

message CSVCMsg_GameEvent {
  message key_t {
    optional int32 type = 1;
    optional string val_string = 2;
    optional float val_float = 3;
    optional int32 val_long = 4;
    optional int32 val_short = 5;
    optional int32 val_byte = 6;
    optional bool val_bool = 7;
    optional uint64 val_uint64 = 8;
    optional bytes val_wstring = 9;
  }

  optional string event_name = 1;
  optional int32 eventid = 2;
  repeated .CSVCMsg_GameEvent.key_t keys = 3;
  optional int32 passthrough = 4;
}


message CSVCMsgList_GameEvents {
  message event_t {
    optional int32 tick = 1;
    optional .CSVCMsg_GameEvent event = 2;
  }

  repeated .CSVCMsgList_GameEvents.event_t events = 1;
}

message CSVCMsg_UserMessage {
  optional int32 msg_type = 1;
  optional bytes msg_data = 2;
  optional int32 passthrough = 3;
}
