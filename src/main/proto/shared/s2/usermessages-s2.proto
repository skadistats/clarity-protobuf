option java_package = "skadistats.clarity.wire.shared.s2.proto";
option java_outer_classname = "S2UserMessages";

import "networkbasetypes-common.proto";
import "networkbasetypes-demo.proto";

enum eRollType {
  ROLL_NONE = -1;
  ROLL_STATS = 0;
  ROLL_CREDITS = 1;
  ROLL_LATE_JOIN_LOGO = 2;
  ROLL_OUTTRO = 3;
}

enum EHapticPulseType {
  VR_HAND_HAPTIC_PULSE_LIGHT = 0;
  VR_HAND_HAPTIC_PULSE_MEDIUM = 1;
  VR_HAND_HAPTIC_PULSE_STRONG = 2;
}

message CUserMessageAchievementEvent {
  optional uint32 achievement = 1;
}

message CUserMessageCloseCaption {
  optional fixed32 hash = 1;
  optional float duration = 2;
  optional bool from_player = 3;
  optional int32 ent_index = 4 [default = -1];
}

message CUserMessageCloseCaptionDirect {
  optional fixed32 hash = 1;
  optional float duration = 2;
  optional bool from_player = 3;
  optional int32 ent_index = 4 [default = -1];
}

message CUserMessageCloseCaptionPlaceholder {
  optional string string = 1;
  optional float duration = 2;
  optional bool from_player = 3;
  optional int32 ent_index = 4 [default = -1];
}

message CUserMessageCurrentTimescale {
  optional float current = 1;
}

message CUserMessageDesiredTimescale {
  optional float desired = 1;
  optional float acceleration = 2;
  optional float minblendrate = 3;
  optional float blenddeltamultiplier = 4;
}

message CUserMessageFade {
  optional uint32 duration = 1;
  optional uint32 hold_time = 2;
  optional uint32 flags = 3;
  optional fixed32 color = 4;
}

message CUserMessageShake {
  optional uint32 command = 1;
  optional float amplitude = 2;
  optional float frequency = 3;
  optional float duration = 4;
}

message CUserMessageShakeDir {
  optional .CUserMessageShake shake = 1;
  optional .CMsgVector direction = 2;
}

message CUserMessageWaterShake {
  optional uint32 command = 1;
  optional float amplitude = 2;
  optional float frequency = 3;
  optional float duration = 4;
}

message CUserMessageScreenTilt {
  optional uint32 command = 1;
  optional bool ease_in_out = 2;
  optional .CMsgVector angle = 3;
  optional float duration = 4;
  optional float time = 5;
}

message CUserMessageSayText {
  optional int32 playerindex = 1 [default = -1];
  optional string text = 2;
  optional bool chat = 3;
}

message CUserMessageSayText2 {
  optional int32 entityindex = 1 [default = -1];
  optional bool chat = 2;
  optional string messagename = 3;
  optional string param1 = 4;
  optional string param2 = 5;
  optional string param3 = 6;
  optional string param4 = 7;
}

message CUserMessageHudMsg {
  optional uint32 channel = 1;
  optional float x = 2;
  optional float y = 3;
  optional fixed32 color1 = 4;
  optional fixed32 color2 = 5;
  optional uint32 effect = 6;
  optional string message = 11;
}

message CUserMessageHudText {
  optional string message = 1;
}

message CUserMessageTextMsg {
  optional uint32 dest = 1;
  repeated string param = 2;
}

message CUserMessageGameTitle {
}

message CUserMessageResetHUD {
}

message CUserMessageSendAudio {
  optional string soundname = 1;
  optional bool stop = 2;
}

message CUserMessageAudioParameter {
  optional uint32 parameter_type = 1;
  optional uint32 name_hash_code = 2;
  optional float value = 3;
  optional uint32 int_value = 4;
}

message CUserMessageVoiceMask {
  repeated uint32 gamerules_masks = 1;
  repeated uint32 ban_masks = 2;
  optional bool mod_enable = 3;
}

message CUserMessageRequestState {
}

message CUserMessageRumble {
  optional int32 index = 1;
  optional int32 data = 2;
  optional int32 flags = 3;
}

message CUserMessageSayTextChannel {
  optional int32 player = 1;
  optional int32 channel = 2;
  optional string text = 3;
}

message CUserMessageColoredText {
  optional uint32 color = 1;
  optional string text = 2;
  optional bool reset = 3;
  optional int32 context_player_slot = 4 [default = -1];
  optional int32 context_value = 5;
  optional int32 context_team_id = 6;
}

message CUserMessageItemPickup {
  optional string itemname = 1;
}

message CUserMessageAmmoDenied {
  optional uint32 ammo_id = 1;
}

message CUserMessageShowMenu {
  optional uint32 validslots = 1;
  optional uint32 displaytime = 2;
  optional bool needmore = 3;
  optional string menustring = 4;
}

message CUserMessageCreditsMsg {
  optional .eRollType rolltype = 1 [default = ROLL_NONE];
  optional float logo_length = 2;
}

message CUserMessageHapticPulse {
  optional int32 hand_id = 1;
  optional .EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
}

message CEntityMessagePlayJingle {
  optional .CEntityMsg entity_msg = 1;
}

message CEntityMessageScreenOverlay {
  optional bool start_effect = 1;
  optional .CEntityMsg entity_msg = 2;
}

message CEntityMessageRemoveAllDecals {
  optional bool remove_decals = 1;
  optional .CEntityMsg entity_msg = 2;
}

message CEntityMessagePropagateForce {
  optional .CMsgVector impulse = 1;
  optional .CEntityMsg entity_msg = 2;
}

message CEntityMessageDoSpark {
  optional .CMsgVector origin = 1;
  optional int32 entityindex = 2 [default = -1];
  optional float radius = 3;
  optional fixed32 color = 4;
  optional uint32 beams = 5;
  optional float thick = 6;
  optional float duration = 7;
  optional .CEntityMsg entity_msg = 8;
}

message CEntityMessageFixAngle {
  optional bool relative = 1;
  optional .CMsgQAngle angle = 2;
  optional .CEntityMsg entity_msg = 3;
}

message CUserMessageCameraTransition {
  message Transition_DataDriven {
    optional string filename = 1;
    optional int32 attach_ent_index = 2 [default = -1];
    optional float duration = 3;
  }

  optional uint32 camera_type = 1;
  optional float duration = 2;
  optional .CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
}

message CUserMsg_HudError {
  optional int32 order_id = 1;
}

message CUserMsg_CustomGameEvent {
  optional string event_name = 1;
  optional bytes data = 2;
}

message CUserMessageHapticsManagerPulse {
  optional int32 hand_id = 1;
  optional float effect_amplitude = 2;
  optional float effect_frequency = 3;
  optional float effect_duration = 4;
}

message CUserMessageHapticsManagerEffect {
  optional int32 hand_id = 1;
  optional uint32 effect_name_hash_code = 2;
  optional float effect_scale = 3;
}

message CUserMessageAnimStateGraphState {
  optional int32 entity_index = 1;
  optional bytes data = 2;
}

message CUserMessageCommandQueueState {
  message command_queue_info_t {
    optional uint32 commands_queued = 1;
    optional uint32 command_queue_desired_size = 2;
    optional uint32 starved_command_ticks = 3;
    optional int32 time_dilation_percent = 4;
  }

  optional int32 player_slot = 1 [default = -1];
  optional .CUserMessageCommandQueueState.command_queue_info_t command_queue_info = 2;
}

message CUserMessageUpdateCssClasses {
  optional int32 target_world_panel = 1;
  optional string css_classes = 2;
  optional bool is_add = 3;
}

message CUserMessageServerFrameTime {
  optional float frame_time = 1;
}

message CUserMessageLagCompensationError {
  optional float distance = 1;
}

message CUserMessageRequestDllStatus {
  optional string dll_action = 1;
  optional bool full_report = 2;
}

message CUserMessageRequestUtilAction {
  optional int32 util1 = 2;
  optional int32 util2 = 3;
  optional int32 util3 = 4;
  optional int32 util4 = 5;
  optional int32 util5 = 6;
}

message CUserMessage_UtilMsg_Response {
  message ItemDetail {
    optional int32 index = 1;
    optional int32 hash = 2;
    optional int32 crc = 3;
    optional string name = 4;
  }

  optional fixed32 crc = 1;
  optional int32 item_count = 2;
  optional fixed32 crc2 = 3;
  optional int32 item_count2 = 4;
  repeated int32 crc_part = 5;
  repeated int32 crc_part2 = 6;
  optional int32 client_timestamp = 7;
  optional int32 platform = 8;
  repeated .CUserMessage_UtilMsg_Response.ItemDetail itemdetails = 9;
  optional int32 itemgroup = 10;
  optional int32 total_count = 11;
  optional int32 total_count2 = 12;
}

message CUserMessage_DllStatus {
  message CVDiagnostic {
    optional uint32 id = 1;
    optional uint32 extended = 2;
    optional uint64 value = 3;
    optional string string_value = 4;
  }

  optional string file_report = 1;
  optional string command_line = 2;
  optional uint32 total_files = 3;
  optional uint32 process_id = 4;
  optional int32 osversion = 5;
  optional uint64 client_time = 6;
  repeated .CUserMessage_DllStatus.CVDiagnostic diagnostics = 7;
}

message CUserMessageRequestInventory {
  optional int32 inventory = 1;
  optional int32 offset = 2;
  optional int32 options = 3;
}

message CUserMessage_Inventory_Response {
  message InventoryDetail {
    optional int32 index = 1;
    optional int64 primary = 2;
    optional int64 offset = 3;
    optional int64 first = 4;
    optional int64 base = 5;
    optional string name = 6;
    optional string base_name = 7;
    optional int32 base_detail = 8;
    optional int32 base_time = 9;
    optional int32 base_hash = 10;
  }

  optional fixed32 crc = 1;
  optional int32 item_count = 2;
  optional int32 osversion = 5;
  optional int32 perf_time = 6;
  optional int32 client_timestamp = 7;
  optional int32 platform = 8;
  repeated .CUserMessage_Inventory_Response.InventoryDetail inventories = 9;
  repeated .CUserMessage_Inventory_Response.InventoryDetail inventories2 = 10;
  repeated .CUserMessage_Inventory_Response.InventoryDetail inventories3 = 14;
  optional int32 inv_type = 11;
  optional int32 build_version = 12;
  optional int32 instance = 13;
  optional int64 start_time = 15;
}

message CUserMessage_PlayResponseConditional {
  optional int32 ent_index = 1 [default = -1];
  repeated int32 player_slots = 2;
  optional string response = 3;
  optional .CMsgVector ent_origin = 4;
  optional float pre_delay = 5;
  optional int32 mix_priority = 6;
}
