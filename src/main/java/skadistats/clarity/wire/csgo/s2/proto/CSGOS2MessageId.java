// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_id.proto

package skadistats.clarity.wire.csgo.s2.proto;

public final class CSGOS2MessageId {
  private CSGOS2MessageId() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code NET_Messages}
   */
  public enum NET_Messages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>net_NOP = 0;</code>
     */
    net_NOP(0, 0),
    /**
     * <code>net_Disconnect = 1;</code>
     */
    net_Disconnect(1, 1),
    /**
     * <code>net_File = 2;</code>
     */
    net_File(2, 2),
    /**
     * <code>net_SplitScreenUser = 3;</code>
     */
    net_SplitScreenUser(3, 3),
    /**
     * <code>net_Tick = 4;</code>
     */
    net_Tick(4, 4),
    /**
     * <code>net_StringCmd = 5;</code>
     */
    net_StringCmd(5, 5),
    /**
     * <code>net_SetConVar = 6;</code>
     */
    net_SetConVar(6, 6),
    /**
     * <code>net_SignonState = 7;</code>
     */
    net_SignonState(7, 7),
    /**
     * <code>net_SpawnGroup_Load = 8;</code>
     */
    net_SpawnGroup_Load(8, 8),
    /**
     * <code>net_SpawnGroup_ManifestUpdate = 9;</code>
     */
    net_SpawnGroup_ManifestUpdate(9, 9),
    /**
     * <code>net_SpawnGroup_SetCreationTick = 11;</code>
     */
    net_SpawnGroup_SetCreationTick(10, 11),
    /**
     * <code>net_SpawnGroup_Unload = 12;</code>
     */
    net_SpawnGroup_Unload(11, 12),
    /**
     * <code>net_SpawnGroup_LoadCompleted = 13;</code>
     */
    net_SpawnGroup_LoadCompleted(12, 13),
    /**
     * <code>net_ReliableMessageEndMarker = 14;</code>
     */
    net_ReliableMessageEndMarker(13, 14),
    /**
     * <code>net_DebugOverlay = 15;</code>
     */
    net_DebugOverlay(14, 15),
    /**
     * <code>net_PlayerAvatarData = 100;</code>
     */
    net_PlayerAvatarData(15, 100),
    ;

    /**
     * <code>net_NOP = 0;</code>
     */
    public static final int net_NOP_VALUE = 0;
    /**
     * <code>net_Disconnect = 1;</code>
     */
    public static final int net_Disconnect_VALUE = 1;
    /**
     * <code>net_File = 2;</code>
     */
    public static final int net_File_VALUE = 2;
    /**
     * <code>net_SplitScreenUser = 3;</code>
     */
    public static final int net_SplitScreenUser_VALUE = 3;
    /**
     * <code>net_Tick = 4;</code>
     */
    public static final int net_Tick_VALUE = 4;
    /**
     * <code>net_StringCmd = 5;</code>
     */
    public static final int net_StringCmd_VALUE = 5;
    /**
     * <code>net_SetConVar = 6;</code>
     */
    public static final int net_SetConVar_VALUE = 6;
    /**
     * <code>net_SignonState = 7;</code>
     */
    public static final int net_SignonState_VALUE = 7;
    /**
     * <code>net_SpawnGroup_Load = 8;</code>
     */
    public static final int net_SpawnGroup_Load_VALUE = 8;
    /**
     * <code>net_SpawnGroup_ManifestUpdate = 9;</code>
     */
    public static final int net_SpawnGroup_ManifestUpdate_VALUE = 9;
    /**
     * <code>net_SpawnGroup_SetCreationTick = 11;</code>
     */
    public static final int net_SpawnGroup_SetCreationTick_VALUE = 11;
    /**
     * <code>net_SpawnGroup_Unload = 12;</code>
     */
    public static final int net_SpawnGroup_Unload_VALUE = 12;
    /**
     * <code>net_SpawnGroup_LoadCompleted = 13;</code>
     */
    public static final int net_SpawnGroup_LoadCompleted_VALUE = 13;
    /**
     * <code>net_ReliableMessageEndMarker = 14;</code>
     */
    public static final int net_ReliableMessageEndMarker_VALUE = 14;
    /**
     * <code>net_DebugOverlay = 15;</code>
     */
    public static final int net_DebugOverlay_VALUE = 15;
    /**
     * <code>net_PlayerAvatarData = 100;</code>
     */
    public static final int net_PlayerAvatarData_VALUE = 100;


    public final int getNumber() { return value; }

    public static NET_Messages valueOf(int value) {
      switch (value) {
        case 0: return net_NOP;
        case 1: return net_Disconnect;
        case 2: return net_File;
        case 3: return net_SplitScreenUser;
        case 4: return net_Tick;
        case 5: return net_StringCmd;
        case 6: return net_SetConVar;
        case 7: return net_SignonState;
        case 8: return net_SpawnGroup_Load;
        case 9: return net_SpawnGroup_ManifestUpdate;
        case 11: return net_SpawnGroup_SetCreationTick;
        case 12: return net_SpawnGroup_Unload;
        case 13: return net_SpawnGroup_LoadCompleted;
        case 14: return net_ReliableMessageEndMarker;
        case 15: return net_DebugOverlay;
        case 100: return net_PlayerAvatarData;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NET_Messages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<NET_Messages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NET_Messages>() {
            public NET_Messages findValueByNumber(int number) {
              return NET_Messages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.csgo.s2.proto.CSGOS2MessageId.getDescriptor().getEnumTypes().get(0);
    }

    private static final NET_Messages[] VALUES = values();

    public static NET_Messages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private NET_Messages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:NET_Messages)
  }

  /**
   * Protobuf enum {@code CLC_Messages}
   */
  public enum CLC_Messages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>clc_ClientInfo = 20;</code>
     */
    clc_ClientInfo(0, 20),
    /**
     * <code>clc_Move = 21;</code>
     */
    clc_Move(1, 21),
    /**
     * <code>clc_VoiceData = 22;</code>
     */
    clc_VoiceData(2, 22),
    /**
     * <code>clc_BaselineAck = 23;</code>
     */
    clc_BaselineAck(3, 23),
    /**
     * <code>clc_ListenEvents = 24;</code>
     */
    clc_ListenEvents(4, 24),
    /**
     * <code>clc_RespondCvarValue = 25;</code>
     */
    clc_RespondCvarValue(5, 25),
    /**
     * <code>clc_FileCRCCheck = 26;</code>
     */
    clc_FileCRCCheck(6, 26),
    /**
     * <code>clc_LoadingProgress = 27;</code>
     */
    clc_LoadingProgress(7, 27),
    /**
     * <code>clc_SplitPlayerConnect = 28;</code>
     */
    clc_SplitPlayerConnect(8, 28),
    /**
     * <code>clc_ClientMessage = 29;</code>
     */
    clc_ClientMessage(9, 29),
    /**
     * <code>clc_SplitPlayerDisconnect = 30;</code>
     */
    clc_SplitPlayerDisconnect(10, 30),
    /**
     * <code>clc_ServerStatus = 31;</code>
     */
    clc_ServerStatus(11, 31),
    /**
     * <code>clc_ServerPing = 32;</code>
     */
    clc_ServerPing(12, 32),
    /**
     * <code>clc_RequestPause = 33;</code>
     */
    clc_RequestPause(13, 33),
    /**
     * <code>clc_CmdKeyValues = 34;</code>
     */
    clc_CmdKeyValues(14, 34),
    /**
     * <code>clc_RconServerDetails = 35;</code>
     */
    clc_RconServerDetails(15, 35),
    /**
     * <code>clc_HltvReplay = 36;</code>
     */
    clc_HltvReplay(16, 36),
    /**
     * <code>clc_Diagnostic = 37;</code>
     */
    clc_Diagnostic(17, 37),
    ;

    /**
     * <code>clc_ClientInfo = 20;</code>
     */
    public static final int clc_ClientInfo_VALUE = 20;
    /**
     * <code>clc_Move = 21;</code>
     */
    public static final int clc_Move_VALUE = 21;
    /**
     * <code>clc_VoiceData = 22;</code>
     */
    public static final int clc_VoiceData_VALUE = 22;
    /**
     * <code>clc_BaselineAck = 23;</code>
     */
    public static final int clc_BaselineAck_VALUE = 23;
    /**
     * <code>clc_ListenEvents = 24;</code>
     */
    public static final int clc_ListenEvents_VALUE = 24;
    /**
     * <code>clc_RespondCvarValue = 25;</code>
     */
    public static final int clc_RespondCvarValue_VALUE = 25;
    /**
     * <code>clc_FileCRCCheck = 26;</code>
     */
    public static final int clc_FileCRCCheck_VALUE = 26;
    /**
     * <code>clc_LoadingProgress = 27;</code>
     */
    public static final int clc_LoadingProgress_VALUE = 27;
    /**
     * <code>clc_SplitPlayerConnect = 28;</code>
     */
    public static final int clc_SplitPlayerConnect_VALUE = 28;
    /**
     * <code>clc_ClientMessage = 29;</code>
     */
    public static final int clc_ClientMessage_VALUE = 29;
    /**
     * <code>clc_SplitPlayerDisconnect = 30;</code>
     */
    public static final int clc_SplitPlayerDisconnect_VALUE = 30;
    /**
     * <code>clc_ServerStatus = 31;</code>
     */
    public static final int clc_ServerStatus_VALUE = 31;
    /**
     * <code>clc_ServerPing = 32;</code>
     */
    public static final int clc_ServerPing_VALUE = 32;
    /**
     * <code>clc_RequestPause = 33;</code>
     */
    public static final int clc_RequestPause_VALUE = 33;
    /**
     * <code>clc_CmdKeyValues = 34;</code>
     */
    public static final int clc_CmdKeyValues_VALUE = 34;
    /**
     * <code>clc_RconServerDetails = 35;</code>
     */
    public static final int clc_RconServerDetails_VALUE = 35;
    /**
     * <code>clc_HltvReplay = 36;</code>
     */
    public static final int clc_HltvReplay_VALUE = 36;
    /**
     * <code>clc_Diagnostic = 37;</code>
     */
    public static final int clc_Diagnostic_VALUE = 37;


    public final int getNumber() { return value; }

    public static CLC_Messages valueOf(int value) {
      switch (value) {
        case 20: return clc_ClientInfo;
        case 21: return clc_Move;
        case 22: return clc_VoiceData;
        case 23: return clc_BaselineAck;
        case 24: return clc_ListenEvents;
        case 25: return clc_RespondCvarValue;
        case 26: return clc_FileCRCCheck;
        case 27: return clc_LoadingProgress;
        case 28: return clc_SplitPlayerConnect;
        case 29: return clc_ClientMessage;
        case 30: return clc_SplitPlayerDisconnect;
        case 31: return clc_ServerStatus;
        case 32: return clc_ServerPing;
        case 33: return clc_RequestPause;
        case 34: return clc_CmdKeyValues;
        case 35: return clc_RconServerDetails;
        case 36: return clc_HltvReplay;
        case 37: return clc_Diagnostic;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CLC_Messages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CLC_Messages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CLC_Messages>() {
            public CLC_Messages findValueByNumber(int number) {
              return CLC_Messages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.csgo.s2.proto.CSGOS2MessageId.getDescriptor().getEnumTypes().get(1);
    }

    private static final CLC_Messages[] VALUES = values();

    public static CLC_Messages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CLC_Messages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:CLC_Messages)
  }

  /**
   * Protobuf enum {@code SVC_Messages}
   */
  public enum SVC_Messages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>svc_ServerInfo = 40;</code>
     */
    svc_ServerInfo(0, 40),
    /**
     * <code>svc_FlattenedSerializer = 41;</code>
     */
    svc_FlattenedSerializer(1, 41),
    /**
     * <code>svc_ClassInfo = 42;</code>
     */
    svc_ClassInfo(2, 42),
    /**
     * <code>svc_SetPause = 43;</code>
     */
    svc_SetPause(3, 43),
    /**
     * <code>svc_CreateStringTable = 44;</code>
     */
    svc_CreateStringTable(4, 44),
    /**
     * <code>svc_UpdateStringTable = 45;</code>
     */
    svc_UpdateStringTable(5, 45),
    /**
     * <code>svc_VoiceInit = 46;</code>
     */
    svc_VoiceInit(6, 46),
    /**
     * <code>svc_VoiceData = 47;</code>
     */
    svc_VoiceData(7, 47),
    /**
     * <code>svc_Print = 48;</code>
     */
    svc_Print(8, 48),
    /**
     * <code>svc_Sounds = 49;</code>
     */
    svc_Sounds(9, 49),
    /**
     * <code>svc_SetView = 50;</code>
     */
    svc_SetView(10, 50),
    /**
     * <code>svc_ClearAllStringTables = 51;</code>
     */
    svc_ClearAllStringTables(11, 51),
    /**
     * <code>svc_CmdKeyValues = 52;</code>
     */
    svc_CmdKeyValues(12, 52),
    /**
     * <code>svc_BSPDecal = 53;</code>
     */
    svc_BSPDecal(13, 53),
    /**
     * <code>svc_SplitScreen = 54;</code>
     */
    svc_SplitScreen(14, 54),
    /**
     * <code>svc_PacketEntities = 55;</code>
     */
    svc_PacketEntities(15, 55),
    /**
     * <code>svc_Prefetch = 56;</code>
     */
    svc_Prefetch(16, 56),
    /**
     * <code>svc_Menu = 57;</code>
     */
    svc_Menu(17, 57),
    /**
     * <code>svc_GetCvarValue = 58;</code>
     */
    svc_GetCvarValue(18, 58),
    /**
     * <code>svc_StopSound = 59;</code>
     */
    svc_StopSound(19, 59),
    /**
     * <code>svc_PeerList = 60;</code>
     */
    svc_PeerList(20, 60),
    /**
     * <code>svc_PacketReliable = 61;</code>
     */
    svc_PacketReliable(21, 61),
    /**
     * <code>svc_HLTVStatus = 62;</code>
     */
    svc_HLTVStatus(22, 62),
    /**
     * <code>svc_ServerSteamID = 63;</code>
     */
    svc_ServerSteamID(23, 63),
    /**
     * <code>svc_FullFrameSplit = 70;</code>
     */
    svc_FullFrameSplit(24, 70),
    /**
     * <code>svc_RconServerDetails = 71;</code>
     */
    svc_RconServerDetails(25, 71),
    /**
     * <code>svc_UserMessage = 72;</code>
     */
    svc_UserMessage(26, 72),
    /**
     * <code>svc_HltvReplay = 73;</code>
     */
    svc_HltvReplay(27, 73),
    /**
     * <code>svc_Broadcast_Command = 74;</code>
     */
    svc_Broadcast_Command(28, 74),
    /**
     * <code>svc_HltvFixupOperatorStatus = 75;</code>
     */
    svc_HltvFixupOperatorStatus(29, 75),
    /**
     * <code>svc_UserCmds = 76;</code>
     */
    svc_UserCmds(30, 76),
    ;

    /**
     * <code>svc_ServerInfo = 40;</code>
     */
    public static final int svc_ServerInfo_VALUE = 40;
    /**
     * <code>svc_FlattenedSerializer = 41;</code>
     */
    public static final int svc_FlattenedSerializer_VALUE = 41;
    /**
     * <code>svc_ClassInfo = 42;</code>
     */
    public static final int svc_ClassInfo_VALUE = 42;
    /**
     * <code>svc_SetPause = 43;</code>
     */
    public static final int svc_SetPause_VALUE = 43;
    /**
     * <code>svc_CreateStringTable = 44;</code>
     */
    public static final int svc_CreateStringTable_VALUE = 44;
    /**
     * <code>svc_UpdateStringTable = 45;</code>
     */
    public static final int svc_UpdateStringTable_VALUE = 45;
    /**
     * <code>svc_VoiceInit = 46;</code>
     */
    public static final int svc_VoiceInit_VALUE = 46;
    /**
     * <code>svc_VoiceData = 47;</code>
     */
    public static final int svc_VoiceData_VALUE = 47;
    /**
     * <code>svc_Print = 48;</code>
     */
    public static final int svc_Print_VALUE = 48;
    /**
     * <code>svc_Sounds = 49;</code>
     */
    public static final int svc_Sounds_VALUE = 49;
    /**
     * <code>svc_SetView = 50;</code>
     */
    public static final int svc_SetView_VALUE = 50;
    /**
     * <code>svc_ClearAllStringTables = 51;</code>
     */
    public static final int svc_ClearAllStringTables_VALUE = 51;
    /**
     * <code>svc_CmdKeyValues = 52;</code>
     */
    public static final int svc_CmdKeyValues_VALUE = 52;
    /**
     * <code>svc_BSPDecal = 53;</code>
     */
    public static final int svc_BSPDecal_VALUE = 53;
    /**
     * <code>svc_SplitScreen = 54;</code>
     */
    public static final int svc_SplitScreen_VALUE = 54;
    /**
     * <code>svc_PacketEntities = 55;</code>
     */
    public static final int svc_PacketEntities_VALUE = 55;
    /**
     * <code>svc_Prefetch = 56;</code>
     */
    public static final int svc_Prefetch_VALUE = 56;
    /**
     * <code>svc_Menu = 57;</code>
     */
    public static final int svc_Menu_VALUE = 57;
    /**
     * <code>svc_GetCvarValue = 58;</code>
     */
    public static final int svc_GetCvarValue_VALUE = 58;
    /**
     * <code>svc_StopSound = 59;</code>
     */
    public static final int svc_StopSound_VALUE = 59;
    /**
     * <code>svc_PeerList = 60;</code>
     */
    public static final int svc_PeerList_VALUE = 60;
    /**
     * <code>svc_PacketReliable = 61;</code>
     */
    public static final int svc_PacketReliable_VALUE = 61;
    /**
     * <code>svc_HLTVStatus = 62;</code>
     */
    public static final int svc_HLTVStatus_VALUE = 62;
    /**
     * <code>svc_ServerSteamID = 63;</code>
     */
    public static final int svc_ServerSteamID_VALUE = 63;
    /**
     * <code>svc_FullFrameSplit = 70;</code>
     */
    public static final int svc_FullFrameSplit_VALUE = 70;
    /**
     * <code>svc_RconServerDetails = 71;</code>
     */
    public static final int svc_RconServerDetails_VALUE = 71;
    /**
     * <code>svc_UserMessage = 72;</code>
     */
    public static final int svc_UserMessage_VALUE = 72;
    /**
     * <code>svc_HltvReplay = 73;</code>
     */
    public static final int svc_HltvReplay_VALUE = 73;
    /**
     * <code>svc_Broadcast_Command = 74;</code>
     */
    public static final int svc_Broadcast_Command_VALUE = 74;
    /**
     * <code>svc_HltvFixupOperatorStatus = 75;</code>
     */
    public static final int svc_HltvFixupOperatorStatus_VALUE = 75;
    /**
     * <code>svc_UserCmds = 76;</code>
     */
    public static final int svc_UserCmds_VALUE = 76;


    public final int getNumber() { return value; }

    public static SVC_Messages valueOf(int value) {
      switch (value) {
        case 40: return svc_ServerInfo;
        case 41: return svc_FlattenedSerializer;
        case 42: return svc_ClassInfo;
        case 43: return svc_SetPause;
        case 44: return svc_CreateStringTable;
        case 45: return svc_UpdateStringTable;
        case 46: return svc_VoiceInit;
        case 47: return svc_VoiceData;
        case 48: return svc_Print;
        case 49: return svc_Sounds;
        case 50: return svc_SetView;
        case 51: return svc_ClearAllStringTables;
        case 52: return svc_CmdKeyValues;
        case 53: return svc_BSPDecal;
        case 54: return svc_SplitScreen;
        case 55: return svc_PacketEntities;
        case 56: return svc_Prefetch;
        case 57: return svc_Menu;
        case 58: return svc_GetCvarValue;
        case 59: return svc_StopSound;
        case 60: return svc_PeerList;
        case 61: return svc_PacketReliable;
        case 62: return svc_HLTVStatus;
        case 63: return svc_ServerSteamID;
        case 70: return svc_FullFrameSplit;
        case 71: return svc_RconServerDetails;
        case 72: return svc_UserMessage;
        case 73: return svc_HltvReplay;
        case 74: return svc_Broadcast_Command;
        case 75: return svc_HltvFixupOperatorStatus;
        case 76: return svc_UserCmds;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SVC_Messages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SVC_Messages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SVC_Messages>() {
            public SVC_Messages findValueByNumber(int number) {
              return SVC_Messages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.csgo.s2.proto.CSGOS2MessageId.getDescriptor().getEnumTypes().get(2);
    }

    private static final SVC_Messages[] VALUES = values();

    public static SVC_Messages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SVC_Messages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SVC_Messages)
  }

  /**
   * Protobuf enum {@code EBaseUserMessages}
   */
  public enum EBaseUserMessages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UM_AchievementEvent = 101;</code>
     */
    UM_AchievementEvent(0, 101),
    /**
     * <code>UM_CloseCaption = 102;</code>
     */
    UM_CloseCaption(1, 102),
    /**
     * <code>UM_CloseCaptionDirect = 103;</code>
     */
    UM_CloseCaptionDirect(2, 103),
    /**
     * <code>UM_CurrentTimescale = 104;</code>
     */
    UM_CurrentTimescale(3, 104),
    /**
     * <code>UM_DesiredTimescale = 105;</code>
     */
    UM_DesiredTimescale(4, 105),
    /**
     * <code>UM_Fade = 106;</code>
     */
    UM_Fade(5, 106),
    /**
     * <code>UM_GameTitle = 107;</code>
     */
    UM_GameTitle(6, 107),
    /**
     * <code>UM_HudMsg = 110;</code>
     */
    UM_HudMsg(7, 110),
    /**
     * <code>UM_HudText = 111;</code>
     */
    UM_HudText(8, 111),
    /**
     * <code>UM_ColoredText = 113;</code>
     */
    UM_ColoredText(9, 113),
    /**
     * <code>UM_RequestState = 114;</code>
     */
    UM_RequestState(10, 114),
    /**
     * <code>UM_ResetHUD = 115;</code>
     */
    UM_ResetHUD(11, 115),
    /**
     * <code>UM_Rumble = 116;</code>
     */
    UM_Rumble(12, 116),
    /**
     * <code>UM_SayText = 117;</code>
     */
    UM_SayText(13, 117),
    /**
     * <code>UM_SayText2 = 118;</code>
     */
    UM_SayText2(14, 118),
    /**
     * <code>UM_SayTextChannel = 119;</code>
     */
    UM_SayTextChannel(15, 119),
    /**
     * <code>UM_Shake = 120;</code>
     */
    UM_Shake(16, 120),
    /**
     * <code>UM_ShakeDir = 121;</code>
     */
    UM_ShakeDir(17, 121),
    /**
     * <code>UM_WaterShake = 122;</code>
     */
    UM_WaterShake(18, 122),
    /**
     * <code>UM_TextMsg = 124;</code>
     */
    UM_TextMsg(19, 124),
    /**
     * <code>UM_ScreenTilt = 125;</code>
     */
    UM_ScreenTilt(20, 125),
    /**
     * <code>UM_VoiceMask = 128;</code>
     */
    UM_VoiceMask(21, 128),
    /**
     * <code>UM_SendAudio = 130;</code>
     */
    UM_SendAudio(22, 130),
    /**
     * <code>UM_ItemPickup = 131;</code>
     */
    UM_ItemPickup(23, 131),
    /**
     * <code>UM_AmmoDenied = 132;</code>
     */
    UM_AmmoDenied(24, 132),
    /**
     * <code>UM_ShowMenu = 134;</code>
     */
    UM_ShowMenu(25, 134),
    /**
     * <code>UM_CreditsMsg = 135;</code>
     */
    UM_CreditsMsg(26, 135),
    /**
     * <code>UM_CloseCaptionPlaceholder = 142;</code>
     */
    UM_CloseCaptionPlaceholder(27, 142),
    /**
     * <code>UM_CameraTransition = 143;</code>
     */
    UM_CameraTransition(28, 143),
    /**
     * <code>UM_AudioParameter = 144;</code>
     */
    UM_AudioParameter(29, 144),
    /**
     * <code>UM_ParticleManager = 145;</code>
     */
    UM_ParticleManager(30, 145),
    /**
     * <code>UM_HudError = 146;</code>
     */
    UM_HudError(31, 146),
    /**
     * <code>UM_CustomGameEvent = 148;</code>
     */
    UM_CustomGameEvent(32, 148),
    /**
     * <code>UM_AnimGraphUpdate = 149;</code>
     */
    UM_AnimGraphUpdate(33, 149),
    /**
     * <code>UM_HapticsManagerPulse = 150;</code>
     */
    UM_HapticsManagerPulse(34, 150),
    /**
     * <code>UM_HapticsManagerEffect = 151;</code>
     */
    UM_HapticsManagerEffect(35, 151),
    /**
     * <code>UM_CommandQueueState = 152;</code>
     */
    UM_CommandQueueState(36, 152),
    /**
     * <code>UM_UpdateCssClasses = 153;</code>
     */
    UM_UpdateCssClasses(37, 153),
    /**
     * <code>UM_ServerFrameTime = 154;</code>
     */
    UM_ServerFrameTime(38, 154),
    /**
     * <code>UM_LagCompensationError = 155;</code>
     */
    UM_LagCompensationError(39, 155),
    /**
     * <code>UM_RequestDllStatus = 156;</code>
     */
    UM_RequestDllStatus(40, 156),
    /**
     * <code>UM_RequestUtilAction = 157;</code>
     */
    UM_RequestUtilAction(41, 157),
    /**
     * <code>UM_UtilActionResponse = 158;</code>
     */
    UM_UtilActionResponse(42, 158),
    /**
     * <code>UM_DllStatusResponse = 159;</code>
     */
    UM_DllStatusResponse(43, 159),
    /**
     * <code>UM_RequestInventory = 160;</code>
     */
    UM_RequestInventory(44, 160),
    /**
     * <code>UM_InventoryResponse = 161;</code>
     */
    UM_InventoryResponse(45, 161),
    /**
     * <code>UM_RequestDiagnostic = 162;</code>
     */
    UM_RequestDiagnostic(46, 162),
    /**
     * <code>UM_DiagnosticResponse = 163;</code>
     */
    UM_DiagnosticResponse(47, 163),
    /**
     * <code>UM_ExtraUserData = 164;</code>
     */
    UM_ExtraUserData(48, 164),
    /**
     * <code>UM_NotifyResponseFound = 165;</code>
     */
    UM_NotifyResponseFound(49, 165),
    /**
     * <code>UM_PlayResponseConditional = 166;</code>
     */
    UM_PlayResponseConditional(50, 166),
    /**
     * <code>UM_MAX_BASE = 200;</code>
     */
    UM_MAX_BASE(51, 200),
    ;

    /**
     * <code>UM_AchievementEvent = 101;</code>
     */
    public static final int UM_AchievementEvent_VALUE = 101;
    /**
     * <code>UM_CloseCaption = 102;</code>
     */
    public static final int UM_CloseCaption_VALUE = 102;
    /**
     * <code>UM_CloseCaptionDirect = 103;</code>
     */
    public static final int UM_CloseCaptionDirect_VALUE = 103;
    /**
     * <code>UM_CurrentTimescale = 104;</code>
     */
    public static final int UM_CurrentTimescale_VALUE = 104;
    /**
     * <code>UM_DesiredTimescale = 105;</code>
     */
    public static final int UM_DesiredTimescale_VALUE = 105;
    /**
     * <code>UM_Fade = 106;</code>
     */
    public static final int UM_Fade_VALUE = 106;
    /**
     * <code>UM_GameTitle = 107;</code>
     */
    public static final int UM_GameTitle_VALUE = 107;
    /**
     * <code>UM_HudMsg = 110;</code>
     */
    public static final int UM_HudMsg_VALUE = 110;
    /**
     * <code>UM_HudText = 111;</code>
     */
    public static final int UM_HudText_VALUE = 111;
    /**
     * <code>UM_ColoredText = 113;</code>
     */
    public static final int UM_ColoredText_VALUE = 113;
    /**
     * <code>UM_RequestState = 114;</code>
     */
    public static final int UM_RequestState_VALUE = 114;
    /**
     * <code>UM_ResetHUD = 115;</code>
     */
    public static final int UM_ResetHUD_VALUE = 115;
    /**
     * <code>UM_Rumble = 116;</code>
     */
    public static final int UM_Rumble_VALUE = 116;
    /**
     * <code>UM_SayText = 117;</code>
     */
    public static final int UM_SayText_VALUE = 117;
    /**
     * <code>UM_SayText2 = 118;</code>
     */
    public static final int UM_SayText2_VALUE = 118;
    /**
     * <code>UM_SayTextChannel = 119;</code>
     */
    public static final int UM_SayTextChannel_VALUE = 119;
    /**
     * <code>UM_Shake = 120;</code>
     */
    public static final int UM_Shake_VALUE = 120;
    /**
     * <code>UM_ShakeDir = 121;</code>
     */
    public static final int UM_ShakeDir_VALUE = 121;
    /**
     * <code>UM_WaterShake = 122;</code>
     */
    public static final int UM_WaterShake_VALUE = 122;
    /**
     * <code>UM_TextMsg = 124;</code>
     */
    public static final int UM_TextMsg_VALUE = 124;
    /**
     * <code>UM_ScreenTilt = 125;</code>
     */
    public static final int UM_ScreenTilt_VALUE = 125;
    /**
     * <code>UM_VoiceMask = 128;</code>
     */
    public static final int UM_VoiceMask_VALUE = 128;
    /**
     * <code>UM_SendAudio = 130;</code>
     */
    public static final int UM_SendAudio_VALUE = 130;
    /**
     * <code>UM_ItemPickup = 131;</code>
     */
    public static final int UM_ItemPickup_VALUE = 131;
    /**
     * <code>UM_AmmoDenied = 132;</code>
     */
    public static final int UM_AmmoDenied_VALUE = 132;
    /**
     * <code>UM_ShowMenu = 134;</code>
     */
    public static final int UM_ShowMenu_VALUE = 134;
    /**
     * <code>UM_CreditsMsg = 135;</code>
     */
    public static final int UM_CreditsMsg_VALUE = 135;
    /**
     * <code>UM_CloseCaptionPlaceholder = 142;</code>
     */
    public static final int UM_CloseCaptionPlaceholder_VALUE = 142;
    /**
     * <code>UM_CameraTransition = 143;</code>
     */
    public static final int UM_CameraTransition_VALUE = 143;
    /**
     * <code>UM_AudioParameter = 144;</code>
     */
    public static final int UM_AudioParameter_VALUE = 144;
    /**
     * <code>UM_ParticleManager = 145;</code>
     */
    public static final int UM_ParticleManager_VALUE = 145;
    /**
     * <code>UM_HudError = 146;</code>
     */
    public static final int UM_HudError_VALUE = 146;
    /**
     * <code>UM_CustomGameEvent = 148;</code>
     */
    public static final int UM_CustomGameEvent_VALUE = 148;
    /**
     * <code>UM_AnimGraphUpdate = 149;</code>
     */
    public static final int UM_AnimGraphUpdate_VALUE = 149;
    /**
     * <code>UM_HapticsManagerPulse = 150;</code>
     */
    public static final int UM_HapticsManagerPulse_VALUE = 150;
    /**
     * <code>UM_HapticsManagerEffect = 151;</code>
     */
    public static final int UM_HapticsManagerEffect_VALUE = 151;
    /**
     * <code>UM_CommandQueueState = 152;</code>
     */
    public static final int UM_CommandQueueState_VALUE = 152;
    /**
     * <code>UM_UpdateCssClasses = 153;</code>
     */
    public static final int UM_UpdateCssClasses_VALUE = 153;
    /**
     * <code>UM_ServerFrameTime = 154;</code>
     */
    public static final int UM_ServerFrameTime_VALUE = 154;
    /**
     * <code>UM_LagCompensationError = 155;</code>
     */
    public static final int UM_LagCompensationError_VALUE = 155;
    /**
     * <code>UM_RequestDllStatus = 156;</code>
     */
    public static final int UM_RequestDllStatus_VALUE = 156;
    /**
     * <code>UM_RequestUtilAction = 157;</code>
     */
    public static final int UM_RequestUtilAction_VALUE = 157;
    /**
     * <code>UM_UtilActionResponse = 158;</code>
     */
    public static final int UM_UtilActionResponse_VALUE = 158;
    /**
     * <code>UM_DllStatusResponse = 159;</code>
     */
    public static final int UM_DllStatusResponse_VALUE = 159;
    /**
     * <code>UM_RequestInventory = 160;</code>
     */
    public static final int UM_RequestInventory_VALUE = 160;
    /**
     * <code>UM_InventoryResponse = 161;</code>
     */
    public static final int UM_InventoryResponse_VALUE = 161;
    /**
     * <code>UM_RequestDiagnostic = 162;</code>
     */
    public static final int UM_RequestDiagnostic_VALUE = 162;
    /**
     * <code>UM_DiagnosticResponse = 163;</code>
     */
    public static final int UM_DiagnosticResponse_VALUE = 163;
    /**
     * <code>UM_ExtraUserData = 164;</code>
     */
    public static final int UM_ExtraUserData_VALUE = 164;
    /**
     * <code>UM_NotifyResponseFound = 165;</code>
     */
    public static final int UM_NotifyResponseFound_VALUE = 165;
    /**
     * <code>UM_PlayResponseConditional = 166;</code>
     */
    public static final int UM_PlayResponseConditional_VALUE = 166;
    /**
     * <code>UM_MAX_BASE = 200;</code>
     */
    public static final int UM_MAX_BASE_VALUE = 200;


    public final int getNumber() { return value; }

    public static EBaseUserMessages valueOf(int value) {
      switch (value) {
        case 101: return UM_AchievementEvent;
        case 102: return UM_CloseCaption;
        case 103: return UM_CloseCaptionDirect;
        case 104: return UM_CurrentTimescale;
        case 105: return UM_DesiredTimescale;
        case 106: return UM_Fade;
        case 107: return UM_GameTitle;
        case 110: return UM_HudMsg;
        case 111: return UM_HudText;
        case 113: return UM_ColoredText;
        case 114: return UM_RequestState;
        case 115: return UM_ResetHUD;
        case 116: return UM_Rumble;
        case 117: return UM_SayText;
        case 118: return UM_SayText2;
        case 119: return UM_SayTextChannel;
        case 120: return UM_Shake;
        case 121: return UM_ShakeDir;
        case 122: return UM_WaterShake;
        case 124: return UM_TextMsg;
        case 125: return UM_ScreenTilt;
        case 128: return UM_VoiceMask;
        case 130: return UM_SendAudio;
        case 131: return UM_ItemPickup;
        case 132: return UM_AmmoDenied;
        case 134: return UM_ShowMenu;
        case 135: return UM_CreditsMsg;
        case 142: return UM_CloseCaptionPlaceholder;
        case 143: return UM_CameraTransition;
        case 144: return UM_AudioParameter;
        case 145: return UM_ParticleManager;
        case 146: return UM_HudError;
        case 148: return UM_CustomGameEvent;
        case 149: return UM_AnimGraphUpdate;
        case 150: return UM_HapticsManagerPulse;
        case 151: return UM_HapticsManagerEffect;
        case 152: return UM_CommandQueueState;
        case 153: return UM_UpdateCssClasses;
        case 154: return UM_ServerFrameTime;
        case 155: return UM_LagCompensationError;
        case 156: return UM_RequestDllStatus;
        case 157: return UM_RequestUtilAction;
        case 158: return UM_UtilActionResponse;
        case 159: return UM_DllStatusResponse;
        case 160: return UM_RequestInventory;
        case 161: return UM_InventoryResponse;
        case 162: return UM_RequestDiagnostic;
        case 163: return UM_DiagnosticResponse;
        case 164: return UM_ExtraUserData;
        case 165: return UM_NotifyResponseFound;
        case 166: return UM_PlayResponseConditional;
        case 200: return UM_MAX_BASE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EBaseUserMessages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EBaseUserMessages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EBaseUserMessages>() {
            public EBaseUserMessages findValueByNumber(int number) {
              return EBaseUserMessages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.csgo.s2.proto.CSGOS2MessageId.getDescriptor().getEnumTypes().get(3);
    }

    private static final EBaseUserMessages[] VALUES = values();

    public static EBaseUserMessages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EBaseUserMessages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EBaseUserMessages)
  }

  /**
   * Protobuf enum {@code EBaseEntityMessages}
   */
  public enum EBaseEntityMessages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EM_PlayJingle = 136;</code>
     */
    EM_PlayJingle(0, 136),
    /**
     * <code>EM_ScreenOverlay = 137;</code>
     */
    EM_ScreenOverlay(1, 137),
    /**
     * <code>EM_RemoveAllDecals = 138;</code>
     */
    EM_RemoveAllDecals(2, 138),
    /**
     * <code>EM_PropagateForce = 139;</code>
     */
    EM_PropagateForce(3, 139),
    /**
     * <code>EM_DoSpark = 140;</code>
     */
    EM_DoSpark(4, 140),
    /**
     * <code>EM_FixAngle = 141;</code>
     */
    EM_FixAngle(5, 141),
    ;

    /**
     * <code>EM_PlayJingle = 136;</code>
     */
    public static final int EM_PlayJingle_VALUE = 136;
    /**
     * <code>EM_ScreenOverlay = 137;</code>
     */
    public static final int EM_ScreenOverlay_VALUE = 137;
    /**
     * <code>EM_RemoveAllDecals = 138;</code>
     */
    public static final int EM_RemoveAllDecals_VALUE = 138;
    /**
     * <code>EM_PropagateForce = 139;</code>
     */
    public static final int EM_PropagateForce_VALUE = 139;
    /**
     * <code>EM_DoSpark = 140;</code>
     */
    public static final int EM_DoSpark_VALUE = 140;
    /**
     * <code>EM_FixAngle = 141;</code>
     */
    public static final int EM_FixAngle_VALUE = 141;


    public final int getNumber() { return value; }

    public static EBaseEntityMessages valueOf(int value) {
      switch (value) {
        case 136: return EM_PlayJingle;
        case 137: return EM_ScreenOverlay;
        case 138: return EM_RemoveAllDecals;
        case 139: return EM_PropagateForce;
        case 140: return EM_DoSpark;
        case 141: return EM_FixAngle;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EBaseEntityMessages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EBaseEntityMessages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EBaseEntityMessages>() {
            public EBaseEntityMessages findValueByNumber(int number) {
              return EBaseEntityMessages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.csgo.s2.proto.CSGOS2MessageId.getDescriptor().getEnumTypes().get(4);
    }

    private static final EBaseEntityMessages[] VALUES = values();

    public static EBaseEntityMessages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EBaseEntityMessages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EBaseEntityMessages)
  }

  /**
   * Protobuf enum {@code ECstrike15UserMessages}
   */
  public enum ECstrike15UserMessages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CS_UM_VGUIMenu = 301;</code>
     */
    CS_UM_VGUIMenu(0, 301),
    /**
     * <code>CS_UM_Geiger = 302;</code>
     */
    CS_UM_Geiger(1, 302),
    /**
     * <code>CS_UM_Train = 303;</code>
     */
    CS_UM_Train(2, 303),
    /**
     * <code>CS_UM_HudText = 304;</code>
     */
    CS_UM_HudText(3, 304),
    /**
     * <code>CS_UM_SayText = 305;</code>
     */
    CS_UM_SayText(4, 305),
    /**
     * <code>CS_UM_SayText2 = 306;</code>
     */
    CS_UM_SayText2(5, 306),
    /**
     * <code>CS_UM_TextMsg = 307;</code>
     */
    CS_UM_TextMsg(6, 307),
    /**
     * <code>CS_UM_HudMsg = 308;</code>
     */
    CS_UM_HudMsg(7, 308),
    /**
     * <code>CS_UM_ResetHud = 309;</code>
     */
    CS_UM_ResetHud(8, 309),
    /**
     * <code>CS_UM_GameTitle = 310;</code>
     */
    CS_UM_GameTitle(9, 310),
    /**
     * <code>CS_UM_Shake = 312;</code>
     */
    CS_UM_Shake(10, 312),
    /**
     * <code>CS_UM_Fade = 313;</code>
     */
    CS_UM_Fade(11, 313),
    /**
     * <code>CS_UM_Rumble = 314;</code>
     */
    CS_UM_Rumble(12, 314),
    /**
     * <code>CS_UM_CloseCaption = 315;</code>
     */
    CS_UM_CloseCaption(13, 315),
    /**
     * <code>CS_UM_CloseCaptionDirect = 316;</code>
     */
    CS_UM_CloseCaptionDirect(14, 316),
    /**
     * <code>CS_UM_SendAudio = 317;</code>
     */
    CS_UM_SendAudio(15, 317),
    /**
     * <code>CS_UM_RawAudio = 318;</code>
     */
    CS_UM_RawAudio(16, 318),
    /**
     * <code>CS_UM_VoiceMask = 319;</code>
     */
    CS_UM_VoiceMask(17, 319),
    /**
     * <code>CS_UM_RequestState = 320;</code>
     */
    CS_UM_RequestState(18, 320),
    /**
     * <code>CS_UM_Damage = 321;</code>
     */
    CS_UM_Damage(19, 321),
    /**
     * <code>CS_UM_RadioText = 322;</code>
     */
    CS_UM_RadioText(20, 322),
    /**
     * <code>CS_UM_HintText = 323;</code>
     */
    CS_UM_HintText(21, 323),
    /**
     * <code>CS_UM_KeyHintText = 324;</code>
     */
    CS_UM_KeyHintText(22, 324),
    /**
     * <code>CS_UM_ProcessSpottedEntityUpdate = 325;</code>
     */
    CS_UM_ProcessSpottedEntityUpdate(23, 325),
    /**
     * <code>CS_UM_ReloadEffect = 326;</code>
     */
    CS_UM_ReloadEffect(24, 326),
    /**
     * <code>CS_UM_AdjustMoney = 327;</code>
     */
    CS_UM_AdjustMoney(25, 327),
    /**
     * <code>CS_UM_UpdateTeamMoney = 328;</code>
     */
    CS_UM_UpdateTeamMoney(26, 328),
    /**
     * <code>CS_UM_StopSpectatorMode = 329;</code>
     */
    CS_UM_StopSpectatorMode(27, 329),
    /**
     * <code>CS_UM_KillCam = 330;</code>
     */
    CS_UM_KillCam(28, 330),
    /**
     * <code>CS_UM_DesiredTimescale = 331;</code>
     */
    CS_UM_DesiredTimescale(29, 331),
    /**
     * <code>CS_UM_CurrentTimescale = 332;</code>
     */
    CS_UM_CurrentTimescale(30, 332),
    /**
     * <code>CS_UM_AchievementEvent = 333;</code>
     */
    CS_UM_AchievementEvent(31, 333),
    /**
     * <code>CS_UM_MatchEndConditions = 334;</code>
     */
    CS_UM_MatchEndConditions(32, 334),
    /**
     * <code>CS_UM_DisconnectToLobby = 335;</code>
     */
    CS_UM_DisconnectToLobby(33, 335),
    /**
     * <code>CS_UM_PlayerStatsUpdate = 336;</code>
     */
    CS_UM_PlayerStatsUpdate(34, 336),
    /**
     * <code>CS_UM_WarmupHasEnded = 338;</code>
     */
    CS_UM_WarmupHasEnded(35, 338),
    /**
     * <code>CS_UM_ClientInfo = 339;</code>
     */
    CS_UM_ClientInfo(36, 339),
    /**
     * <code>CS_UM_XRankGet = 340;</code>
     */
    CS_UM_XRankGet(37, 340),
    /**
     * <code>CS_UM_XRankUpd = 341;</code>
     */
    CS_UM_XRankUpd(38, 341),
    /**
     * <code>CS_UM_CallVoteFailed = 345;</code>
     */
    CS_UM_CallVoteFailed(39, 345),
    /**
     * <code>CS_UM_VoteStart = 346;</code>
     */
    CS_UM_VoteStart(40, 346),
    /**
     * <code>CS_UM_VotePass = 347;</code>
     */
    CS_UM_VotePass(41, 347),
    /**
     * <code>CS_UM_VoteFailed = 348;</code>
     */
    CS_UM_VoteFailed(42, 348),
    /**
     * <code>CS_UM_VoteSetup = 349;</code>
     */
    CS_UM_VoteSetup(43, 349),
    /**
     * <code>CS_UM_ServerRankRevealAll = 350;</code>
     */
    CS_UM_ServerRankRevealAll(44, 350),
    /**
     * <code>CS_UM_SendLastKillerDamageToClient = 351;</code>
     */
    CS_UM_SendLastKillerDamageToClient(45, 351),
    /**
     * <code>CS_UM_ServerRankUpdate = 352;</code>
     */
    CS_UM_ServerRankUpdate(46, 352),
    /**
     * <code>CS_UM_ItemPickup = 353;</code>
     */
    CS_UM_ItemPickup(47, 353),
    /**
     * <code>CS_UM_ShowMenu = 354;</code>
     */
    CS_UM_ShowMenu(48, 354),
    /**
     * <code>CS_UM_BarTime = 355;</code>
     */
    CS_UM_BarTime(49, 355),
    /**
     * <code>CS_UM_AmmoDenied = 356;</code>
     */
    CS_UM_AmmoDenied(50, 356),
    /**
     * <code>CS_UM_MarkAchievement = 357;</code>
     */
    CS_UM_MarkAchievement(51, 357),
    /**
     * <code>CS_UM_MatchStatsUpdate = 358;</code>
     */
    CS_UM_MatchStatsUpdate(52, 358),
    /**
     * <code>CS_UM_ItemDrop = 359;</code>
     */
    CS_UM_ItemDrop(53, 359),
    /**
     * <code>CS_UM_GlowPropTurnOff = 360;</code>
     */
    CS_UM_GlowPropTurnOff(54, 360),
    /**
     * <code>CS_UM_SendPlayerItemDrops = 361;</code>
     */
    CS_UM_SendPlayerItemDrops(55, 361),
    /**
     * <code>CS_UM_RoundBackupFilenames = 362;</code>
     */
    CS_UM_RoundBackupFilenames(56, 362),
    /**
     * <code>CS_UM_SendPlayerItemFound = 363;</code>
     */
    CS_UM_SendPlayerItemFound(57, 363),
    /**
     * <code>CS_UM_ReportHit = 364;</code>
     */
    CS_UM_ReportHit(58, 364),
    /**
     * <code>CS_UM_XpUpdate = 365;</code>
     */
    CS_UM_XpUpdate(59, 365),
    /**
     * <code>CS_UM_QuestProgress = 366;</code>
     */
    CS_UM_QuestProgress(60, 366),
    /**
     * <code>CS_UM_ScoreLeaderboardData = 367;</code>
     */
    CS_UM_ScoreLeaderboardData(61, 367),
    /**
     * <code>CS_UM_PlayerDecalDigitalSignature = 368;</code>
     */
    CS_UM_PlayerDecalDigitalSignature(62, 368),
    /**
     * <code>CS_UM_WeaponSound = 369;</code>
     */
    CS_UM_WeaponSound(63, 369),
    /**
     * <code>CS_UM_UpdateScreenHealthBar = 370;</code>
     */
    CS_UM_UpdateScreenHealthBar(64, 370),
    /**
     * <code>CS_UM_EntityOutlineHighlight = 371;</code>
     */
    CS_UM_EntityOutlineHighlight(65, 371),
    /**
     * <code>CS_UM_SSUI = 372;</code>
     */
    CS_UM_SSUI(66, 372),
    /**
     * <code>CS_UM_SurvivalStats = 373;</code>
     */
    CS_UM_SurvivalStats(67, 373),
    /**
     * <code>CS_UM_DisconnectToLobby2 = 374;</code>
     */
    CS_UM_DisconnectToLobby2(68, 374),
    /**
     * <code>CS_UM_EndOfMatchAllPlayersData = 375;</code>
     */
    CS_UM_EndOfMatchAllPlayersData(69, 375),
    /**
     * <code>CS_UM_PostRoundDamageReport = 376;</code>
     */
    CS_UM_PostRoundDamageReport(70, 376),
    /**
     * <code>CS_UM_RoundEndReportData = 379;</code>
     */
    CS_UM_RoundEndReportData(71, 379),
    /**
     * <code>CS_UM_CurrentRoundOdds = 380;</code>
     */
    CS_UM_CurrentRoundOdds(72, 380),
    /**
     * <code>CS_UM_DeepStats = 381;</code>
     */
    CS_UM_DeepStats(73, 381),
    /**
     * <code>CS_UM_UtilMsg = 382;</code>
     */
    CS_UM_UtilMsg(74, 382),
    /**
     * <code>CS_UM_ShootInfo = 383;</code>
     */
    CS_UM_ShootInfo(75, 383),
    /**
     * <code>CS_UM_CounterStrafe = 385;</code>
     */
    CS_UM_CounterStrafe(76, 385),
    ;

    /**
     * <code>CS_UM_VGUIMenu = 301;</code>
     */
    public static final int CS_UM_VGUIMenu_VALUE = 301;
    /**
     * <code>CS_UM_Geiger = 302;</code>
     */
    public static final int CS_UM_Geiger_VALUE = 302;
    /**
     * <code>CS_UM_Train = 303;</code>
     */
    public static final int CS_UM_Train_VALUE = 303;
    /**
     * <code>CS_UM_HudText = 304;</code>
     */
    public static final int CS_UM_HudText_VALUE = 304;
    /**
     * <code>CS_UM_SayText = 305;</code>
     */
    public static final int CS_UM_SayText_VALUE = 305;
    /**
     * <code>CS_UM_SayText2 = 306;</code>
     */
    public static final int CS_UM_SayText2_VALUE = 306;
    /**
     * <code>CS_UM_TextMsg = 307;</code>
     */
    public static final int CS_UM_TextMsg_VALUE = 307;
    /**
     * <code>CS_UM_HudMsg = 308;</code>
     */
    public static final int CS_UM_HudMsg_VALUE = 308;
    /**
     * <code>CS_UM_ResetHud = 309;</code>
     */
    public static final int CS_UM_ResetHud_VALUE = 309;
    /**
     * <code>CS_UM_GameTitle = 310;</code>
     */
    public static final int CS_UM_GameTitle_VALUE = 310;
    /**
     * <code>CS_UM_Shake = 312;</code>
     */
    public static final int CS_UM_Shake_VALUE = 312;
    /**
     * <code>CS_UM_Fade = 313;</code>
     */
    public static final int CS_UM_Fade_VALUE = 313;
    /**
     * <code>CS_UM_Rumble = 314;</code>
     */
    public static final int CS_UM_Rumble_VALUE = 314;
    /**
     * <code>CS_UM_CloseCaption = 315;</code>
     */
    public static final int CS_UM_CloseCaption_VALUE = 315;
    /**
     * <code>CS_UM_CloseCaptionDirect = 316;</code>
     */
    public static final int CS_UM_CloseCaptionDirect_VALUE = 316;
    /**
     * <code>CS_UM_SendAudio = 317;</code>
     */
    public static final int CS_UM_SendAudio_VALUE = 317;
    /**
     * <code>CS_UM_RawAudio = 318;</code>
     */
    public static final int CS_UM_RawAudio_VALUE = 318;
    /**
     * <code>CS_UM_VoiceMask = 319;</code>
     */
    public static final int CS_UM_VoiceMask_VALUE = 319;
    /**
     * <code>CS_UM_RequestState = 320;</code>
     */
    public static final int CS_UM_RequestState_VALUE = 320;
    /**
     * <code>CS_UM_Damage = 321;</code>
     */
    public static final int CS_UM_Damage_VALUE = 321;
    /**
     * <code>CS_UM_RadioText = 322;</code>
     */
    public static final int CS_UM_RadioText_VALUE = 322;
    /**
     * <code>CS_UM_HintText = 323;</code>
     */
    public static final int CS_UM_HintText_VALUE = 323;
    /**
     * <code>CS_UM_KeyHintText = 324;</code>
     */
    public static final int CS_UM_KeyHintText_VALUE = 324;
    /**
     * <code>CS_UM_ProcessSpottedEntityUpdate = 325;</code>
     */
    public static final int CS_UM_ProcessSpottedEntityUpdate_VALUE = 325;
    /**
     * <code>CS_UM_ReloadEffect = 326;</code>
     */
    public static final int CS_UM_ReloadEffect_VALUE = 326;
    /**
     * <code>CS_UM_AdjustMoney = 327;</code>
     */
    public static final int CS_UM_AdjustMoney_VALUE = 327;
    /**
     * <code>CS_UM_UpdateTeamMoney = 328;</code>
     */
    public static final int CS_UM_UpdateTeamMoney_VALUE = 328;
    /**
     * <code>CS_UM_StopSpectatorMode = 329;</code>
     */
    public static final int CS_UM_StopSpectatorMode_VALUE = 329;
    /**
     * <code>CS_UM_KillCam = 330;</code>
     */
    public static final int CS_UM_KillCam_VALUE = 330;
    /**
     * <code>CS_UM_DesiredTimescale = 331;</code>
     */
    public static final int CS_UM_DesiredTimescale_VALUE = 331;
    /**
     * <code>CS_UM_CurrentTimescale = 332;</code>
     */
    public static final int CS_UM_CurrentTimescale_VALUE = 332;
    /**
     * <code>CS_UM_AchievementEvent = 333;</code>
     */
    public static final int CS_UM_AchievementEvent_VALUE = 333;
    /**
     * <code>CS_UM_MatchEndConditions = 334;</code>
     */
    public static final int CS_UM_MatchEndConditions_VALUE = 334;
    /**
     * <code>CS_UM_DisconnectToLobby = 335;</code>
     */
    public static final int CS_UM_DisconnectToLobby_VALUE = 335;
    /**
     * <code>CS_UM_PlayerStatsUpdate = 336;</code>
     */
    public static final int CS_UM_PlayerStatsUpdate_VALUE = 336;
    /**
     * <code>CS_UM_WarmupHasEnded = 338;</code>
     */
    public static final int CS_UM_WarmupHasEnded_VALUE = 338;
    /**
     * <code>CS_UM_ClientInfo = 339;</code>
     */
    public static final int CS_UM_ClientInfo_VALUE = 339;
    /**
     * <code>CS_UM_XRankGet = 340;</code>
     */
    public static final int CS_UM_XRankGet_VALUE = 340;
    /**
     * <code>CS_UM_XRankUpd = 341;</code>
     */
    public static final int CS_UM_XRankUpd_VALUE = 341;
    /**
     * <code>CS_UM_CallVoteFailed = 345;</code>
     */
    public static final int CS_UM_CallVoteFailed_VALUE = 345;
    /**
     * <code>CS_UM_VoteStart = 346;</code>
     */
    public static final int CS_UM_VoteStart_VALUE = 346;
    /**
     * <code>CS_UM_VotePass = 347;</code>
     */
    public static final int CS_UM_VotePass_VALUE = 347;
    /**
     * <code>CS_UM_VoteFailed = 348;</code>
     */
    public static final int CS_UM_VoteFailed_VALUE = 348;
    /**
     * <code>CS_UM_VoteSetup = 349;</code>
     */
    public static final int CS_UM_VoteSetup_VALUE = 349;
    /**
     * <code>CS_UM_ServerRankRevealAll = 350;</code>
     */
    public static final int CS_UM_ServerRankRevealAll_VALUE = 350;
    /**
     * <code>CS_UM_SendLastKillerDamageToClient = 351;</code>
     */
    public static final int CS_UM_SendLastKillerDamageToClient_VALUE = 351;
    /**
     * <code>CS_UM_ServerRankUpdate = 352;</code>
     */
    public static final int CS_UM_ServerRankUpdate_VALUE = 352;
    /**
     * <code>CS_UM_ItemPickup = 353;</code>
     */
    public static final int CS_UM_ItemPickup_VALUE = 353;
    /**
     * <code>CS_UM_ShowMenu = 354;</code>
     */
    public static final int CS_UM_ShowMenu_VALUE = 354;
    /**
     * <code>CS_UM_BarTime = 355;</code>
     */
    public static final int CS_UM_BarTime_VALUE = 355;
    /**
     * <code>CS_UM_AmmoDenied = 356;</code>
     */
    public static final int CS_UM_AmmoDenied_VALUE = 356;
    /**
     * <code>CS_UM_MarkAchievement = 357;</code>
     */
    public static final int CS_UM_MarkAchievement_VALUE = 357;
    /**
     * <code>CS_UM_MatchStatsUpdate = 358;</code>
     */
    public static final int CS_UM_MatchStatsUpdate_VALUE = 358;
    /**
     * <code>CS_UM_ItemDrop = 359;</code>
     */
    public static final int CS_UM_ItemDrop_VALUE = 359;
    /**
     * <code>CS_UM_GlowPropTurnOff = 360;</code>
     */
    public static final int CS_UM_GlowPropTurnOff_VALUE = 360;
    /**
     * <code>CS_UM_SendPlayerItemDrops = 361;</code>
     */
    public static final int CS_UM_SendPlayerItemDrops_VALUE = 361;
    /**
     * <code>CS_UM_RoundBackupFilenames = 362;</code>
     */
    public static final int CS_UM_RoundBackupFilenames_VALUE = 362;
    /**
     * <code>CS_UM_SendPlayerItemFound = 363;</code>
     */
    public static final int CS_UM_SendPlayerItemFound_VALUE = 363;
    /**
     * <code>CS_UM_ReportHit = 364;</code>
     */
    public static final int CS_UM_ReportHit_VALUE = 364;
    /**
     * <code>CS_UM_XpUpdate = 365;</code>
     */
    public static final int CS_UM_XpUpdate_VALUE = 365;
    /**
     * <code>CS_UM_QuestProgress = 366;</code>
     */
    public static final int CS_UM_QuestProgress_VALUE = 366;
    /**
     * <code>CS_UM_ScoreLeaderboardData = 367;</code>
     */
    public static final int CS_UM_ScoreLeaderboardData_VALUE = 367;
    /**
     * <code>CS_UM_PlayerDecalDigitalSignature = 368;</code>
     */
    public static final int CS_UM_PlayerDecalDigitalSignature_VALUE = 368;
    /**
     * <code>CS_UM_WeaponSound = 369;</code>
     */
    public static final int CS_UM_WeaponSound_VALUE = 369;
    /**
     * <code>CS_UM_UpdateScreenHealthBar = 370;</code>
     */
    public static final int CS_UM_UpdateScreenHealthBar_VALUE = 370;
    /**
     * <code>CS_UM_EntityOutlineHighlight = 371;</code>
     */
    public static final int CS_UM_EntityOutlineHighlight_VALUE = 371;
    /**
     * <code>CS_UM_SSUI = 372;</code>
     */
    public static final int CS_UM_SSUI_VALUE = 372;
    /**
     * <code>CS_UM_SurvivalStats = 373;</code>
     */
    public static final int CS_UM_SurvivalStats_VALUE = 373;
    /**
     * <code>CS_UM_DisconnectToLobby2 = 374;</code>
     */
    public static final int CS_UM_DisconnectToLobby2_VALUE = 374;
    /**
     * <code>CS_UM_EndOfMatchAllPlayersData = 375;</code>
     */
    public static final int CS_UM_EndOfMatchAllPlayersData_VALUE = 375;
    /**
     * <code>CS_UM_PostRoundDamageReport = 376;</code>
     */
    public static final int CS_UM_PostRoundDamageReport_VALUE = 376;
    /**
     * <code>CS_UM_RoundEndReportData = 379;</code>
     */
    public static final int CS_UM_RoundEndReportData_VALUE = 379;
    /**
     * <code>CS_UM_CurrentRoundOdds = 380;</code>
     */
    public static final int CS_UM_CurrentRoundOdds_VALUE = 380;
    /**
     * <code>CS_UM_DeepStats = 381;</code>
     */
    public static final int CS_UM_DeepStats_VALUE = 381;
    /**
     * <code>CS_UM_UtilMsg = 382;</code>
     */
    public static final int CS_UM_UtilMsg_VALUE = 382;
    /**
     * <code>CS_UM_ShootInfo = 383;</code>
     */
    public static final int CS_UM_ShootInfo_VALUE = 383;
    /**
     * <code>CS_UM_CounterStrafe = 385;</code>
     */
    public static final int CS_UM_CounterStrafe_VALUE = 385;


    public final int getNumber() { return value; }

    public static ECstrike15UserMessages valueOf(int value) {
      switch (value) {
        case 301: return CS_UM_VGUIMenu;
        case 302: return CS_UM_Geiger;
        case 303: return CS_UM_Train;
        case 304: return CS_UM_HudText;
        case 305: return CS_UM_SayText;
        case 306: return CS_UM_SayText2;
        case 307: return CS_UM_TextMsg;
        case 308: return CS_UM_HudMsg;
        case 309: return CS_UM_ResetHud;
        case 310: return CS_UM_GameTitle;
        case 312: return CS_UM_Shake;
        case 313: return CS_UM_Fade;
        case 314: return CS_UM_Rumble;
        case 315: return CS_UM_CloseCaption;
        case 316: return CS_UM_CloseCaptionDirect;
        case 317: return CS_UM_SendAudio;
        case 318: return CS_UM_RawAudio;
        case 319: return CS_UM_VoiceMask;
        case 320: return CS_UM_RequestState;
        case 321: return CS_UM_Damage;
        case 322: return CS_UM_RadioText;
        case 323: return CS_UM_HintText;
        case 324: return CS_UM_KeyHintText;
        case 325: return CS_UM_ProcessSpottedEntityUpdate;
        case 326: return CS_UM_ReloadEffect;
        case 327: return CS_UM_AdjustMoney;
        case 328: return CS_UM_UpdateTeamMoney;
        case 329: return CS_UM_StopSpectatorMode;
        case 330: return CS_UM_KillCam;
        case 331: return CS_UM_DesiredTimescale;
        case 332: return CS_UM_CurrentTimescale;
        case 333: return CS_UM_AchievementEvent;
        case 334: return CS_UM_MatchEndConditions;
        case 335: return CS_UM_DisconnectToLobby;
        case 336: return CS_UM_PlayerStatsUpdate;
        case 338: return CS_UM_WarmupHasEnded;
        case 339: return CS_UM_ClientInfo;
        case 340: return CS_UM_XRankGet;
        case 341: return CS_UM_XRankUpd;
        case 345: return CS_UM_CallVoteFailed;
        case 346: return CS_UM_VoteStart;
        case 347: return CS_UM_VotePass;
        case 348: return CS_UM_VoteFailed;
        case 349: return CS_UM_VoteSetup;
        case 350: return CS_UM_ServerRankRevealAll;
        case 351: return CS_UM_SendLastKillerDamageToClient;
        case 352: return CS_UM_ServerRankUpdate;
        case 353: return CS_UM_ItemPickup;
        case 354: return CS_UM_ShowMenu;
        case 355: return CS_UM_BarTime;
        case 356: return CS_UM_AmmoDenied;
        case 357: return CS_UM_MarkAchievement;
        case 358: return CS_UM_MatchStatsUpdate;
        case 359: return CS_UM_ItemDrop;
        case 360: return CS_UM_GlowPropTurnOff;
        case 361: return CS_UM_SendPlayerItemDrops;
        case 362: return CS_UM_RoundBackupFilenames;
        case 363: return CS_UM_SendPlayerItemFound;
        case 364: return CS_UM_ReportHit;
        case 365: return CS_UM_XpUpdate;
        case 366: return CS_UM_QuestProgress;
        case 367: return CS_UM_ScoreLeaderboardData;
        case 368: return CS_UM_PlayerDecalDigitalSignature;
        case 369: return CS_UM_WeaponSound;
        case 370: return CS_UM_UpdateScreenHealthBar;
        case 371: return CS_UM_EntityOutlineHighlight;
        case 372: return CS_UM_SSUI;
        case 373: return CS_UM_SurvivalStats;
        case 374: return CS_UM_DisconnectToLobby2;
        case 375: return CS_UM_EndOfMatchAllPlayersData;
        case 376: return CS_UM_PostRoundDamageReport;
        case 379: return CS_UM_RoundEndReportData;
        case 380: return CS_UM_CurrentRoundOdds;
        case 381: return CS_UM_DeepStats;
        case 382: return CS_UM_UtilMsg;
        case 383: return CS_UM_ShootInfo;
        case 385: return CS_UM_CounterStrafe;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ECstrike15UserMessages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ECstrike15UserMessages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ECstrike15UserMessages>() {
            public ECstrike15UserMessages findValueByNumber(int number) {
              return ECstrike15UserMessages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.csgo.s2.proto.CSGOS2MessageId.getDescriptor().getEnumTypes().get(5);
    }

    private static final ECstrike15UserMessages[] VALUES = values();

    public static ECstrike15UserMessages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ECstrike15UserMessages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ECstrike15UserMessages)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020message_id.proto*\216\003\n\014NET_Messages\022\013\n\007n" +
      "et_NOP\020\000\022\022\n\016net_Disconnect\020\001\022\014\n\010net_File" +
      "\020\002\022\027\n\023net_SplitScreenUser\020\003\022\014\n\010net_Tick\020" +
      "\004\022\021\n\rnet_StringCmd\020\005\022\021\n\rnet_SetConVar\020\006\022" +
      "\023\n\017net_SignonState\020\007\022\027\n\023net_SpawnGroup_L" +
      "oad\020\010\022!\n\035net_SpawnGroup_ManifestUpdate\020\t" +
      "\022\"\n\036net_SpawnGroup_SetCreationTick\020\013\022\031\n\025" +
      "net_SpawnGroup_Unload\020\014\022 \n\034net_SpawnGrou" +
      "p_LoadCompleted\020\r\022 \n\034net_ReliableMessage" +
      "EndMarker\020\016\022\024\n\020net_DebugOverlay\020\017\022\030\n\024net",
      "_PlayerAvatarData\020d*\242\003\n\014CLC_Messages\022\022\n\016" +
      "clc_ClientInfo\020\024\022\014\n\010clc_Move\020\025\022\021\n\rclc_Vo" +
      "iceData\020\026\022\023\n\017clc_BaselineAck\020\027\022\024\n\020clc_Li" +
      "stenEvents\020\030\022\030\n\024clc_RespondCvarValue\020\031\022\024" +
      "\n\020clc_FileCRCCheck\020\032\022\027\n\023clc_LoadingProgr" +
      "ess\020\033\022\032\n\026clc_SplitPlayerConnect\020\034\022\025\n\021clc" +
      "_ClientMessage\020\035\022\035\n\031clc_SplitPlayerDisco" +
      "nnect\020\036\022\024\n\020clc_ServerStatus\020\037\022\022\n\016clc_Ser" +
      "verPing\020 \022\024\n\020clc_RequestPause\020!\022\024\n\020clc_C" +
      "mdKeyValues\020\"\022\031\n\025clc_RconServerDetails\020#",
      "\022\022\n\016clc_HltvReplay\020$\022\022\n\016clc_Diagnostic\020%" +
      "*\253\005\n\014SVC_Messages\022\022\n\016svc_ServerInfo\020(\022\033\n" +
      "\027svc_FlattenedSerializer\020)\022\021\n\rsvc_ClassI" +
      "nfo\020*\022\020\n\014svc_SetPause\020+\022\031\n\025svc_CreateStr" +
      "ingTable\020,\022\031\n\025svc_UpdateStringTable\020-\022\021\n" +
      "\rsvc_VoiceInit\020.\022\021\n\rsvc_VoiceData\020/\022\r\n\ts" +
      "vc_Print\0200\022\016\n\nsvc_Sounds\0201\022\017\n\013svc_SetVie" +
      "w\0202\022\034\n\030svc_ClearAllStringTables\0203\022\024\n\020svc" +
      "_CmdKeyValues\0204\022\020\n\014svc_BSPDecal\0205\022\023\n\017svc" +
      "_SplitScreen\0206\022\026\n\022svc_PacketEntities\0207\022\020",
      "\n\014svc_Prefetch\0208\022\014\n\010svc_Menu\0209\022\024\n\020svc_Ge" +
      "tCvarValue\020:\022\021\n\rsvc_StopSound\020;\022\020\n\014svc_P" +
      "eerList\020<\022\026\n\022svc_PacketReliable\020=\022\022\n\016svc" +
      "_HLTVStatus\020>\022\025\n\021svc_ServerSteamID\020?\022\026\n\022" +
      "svc_FullFrameSplit\020F\022\031\n\025svc_RconServerDe" +
      "tails\020G\022\023\n\017svc_UserMessage\020H\022\022\n\016svc_Hltv" +
      "Replay\020I\022\031\n\025svc_Broadcast_Command\020J\022\037\n\033s" +
      "vc_HltvFixupOperatorStatus\020K\022\020\n\014svc_User" +
      "Cmds\020L*\254\t\n\021EBaseUserMessages\022\027\n\023UM_Achie" +
      "vementEvent\020e\022\023\n\017UM_CloseCaption\020f\022\031\n\025UM",
      "_CloseCaptionDirect\020g\022\027\n\023UM_CurrentTimes" +
      "cale\020h\022\027\n\023UM_DesiredTimescale\020i\022\013\n\007UM_Fa" +
      "de\020j\022\020\n\014UM_GameTitle\020k\022\r\n\tUM_HudMsg\020n\022\016\n" +
      "\nUM_HudText\020o\022\022\n\016UM_ColoredText\020q\022\023\n\017UM_" +
      "RequestState\020r\022\017\n\013UM_ResetHUD\020s\022\r\n\tUM_Ru" +
      "mble\020t\022\016\n\nUM_SayText\020u\022\017\n\013UM_SayText2\020v\022" +
      "\025\n\021UM_SayTextChannel\020w\022\014\n\010UM_Shake\020x\022\017\n\013" +
      "UM_ShakeDir\020y\022\021\n\rUM_WaterShake\020z\022\016\n\nUM_T" +
      "extMsg\020|\022\021\n\rUM_ScreenTilt\020}\022\021\n\014UM_VoiceM" +
      "ask\020\200\001\022\021\n\014UM_SendAudio\020\202\001\022\022\n\rUM_ItemPick",
      "up\020\203\001\022\022\n\rUM_AmmoDenied\020\204\001\022\020\n\013UM_ShowMenu" +
      "\020\206\001\022\022\n\rUM_CreditsMsg\020\207\001\022\037\n\032UM_CloseCapti" +
      "onPlaceholder\020\216\001\022\030\n\023UM_CameraTransition\020" +
      "\217\001\022\026\n\021UM_AudioParameter\020\220\001\022\027\n\022UM_Particl" +
      "eManager\020\221\001\022\020\n\013UM_HudError\020\222\001\022\027\n\022UM_Cust" +
      "omGameEvent\020\224\001\022\027\n\022UM_AnimGraphUpdate\020\225\001\022" +
      "\033\n\026UM_HapticsManagerPulse\020\226\001\022\034\n\027UM_Hapti" +
      "csManagerEffect\020\227\001\022\031\n\024UM_CommandQueueSta" +
      "te\020\230\001\022\030\n\023UM_UpdateCssClasses\020\231\001\022\027\n\022UM_Se" +
      "rverFrameTime\020\232\001\022\034\n\027UM_LagCompensationEr",
      "ror\020\233\001\022\030\n\023UM_RequestDllStatus\020\234\001\022\031\n\024UM_R" +
      "equestUtilAction\020\235\001\022\032\n\025UM_UtilActionResp" +
      "onse\020\236\001\022\031\n\024UM_DllStatusResponse\020\237\001\022\030\n\023UM" +
      "_RequestInventory\020\240\001\022\031\n\024UM_InventoryResp" +
      "onse\020\241\001\022\031\n\024UM_RequestDiagnostic\020\242\001\022\032\n\025UM" +
      "_DiagnosticResponse\020\243\001\022\025\n\020UM_ExtraUserDa" +
      "ta\020\244\001\022\033\n\026UM_NotifyResponseFound\020\245\001\022\037\n\032UM" +
      "_PlayResponseConditional\020\246\001\022\020\n\013UM_MAX_BA" +
      "SE\020\310\001*\224\001\n\023EBaseEntityMessages\022\022\n\rEM_Play" +
      "Jingle\020\210\001\022\025\n\020EM_ScreenOverlay\020\211\001\022\027\n\022EM_R",
      "emoveAllDecals\020\212\001\022\026\n\021EM_PropagateForce\020\213" +
      "\001\022\017\n\nEM_DoSpark\020\214\001\022\020\n\013EM_FixAngle\020\215\001*\300\017\n" +
      "\026ECstrike15UserMessages\022\023\n\016CS_UM_VGUIMen" +
      "u\020\255\002\022\021\n\014CS_UM_Geiger\020\256\002\022\020\n\013CS_UM_Train\020\257" +
      "\002\022\022\n\rCS_UM_HudText\020\260\002\022\022\n\rCS_UM_SayText\020\261" +
      "\002\022\023\n\016CS_UM_SayText2\020\262\002\022\022\n\rCS_UM_TextMsg\020" +
      "\263\002\022\021\n\014CS_UM_HudMsg\020\264\002\022\023\n\016CS_UM_ResetHud\020" +
      "\265\002\022\024\n\017CS_UM_GameTitle\020\266\002\022\020\n\013CS_UM_Shake\020" +
      "\270\002\022\017\n\nCS_UM_Fade\020\271\002\022\021\n\014CS_UM_Rumble\020\272\002\022\027" +
      "\n\022CS_UM_CloseCaption\020\273\002\022\035\n\030CS_UM_CloseCa",
      "ptionDirect\020\274\002\022\024\n\017CS_UM_SendAudio\020\275\002\022\023\n\016" +
      "CS_UM_RawAudio\020\276\002\022\024\n\017CS_UM_VoiceMask\020\277\002\022" +
      "\027\n\022CS_UM_RequestState\020\300\002\022\021\n\014CS_UM_Damage" +
      "\020\301\002\022\024\n\017CS_UM_RadioText\020\302\002\022\023\n\016CS_UM_HintT" +
      "ext\020\303\002\022\026\n\021CS_UM_KeyHintText\020\304\002\022%\n CS_UM_" +
      "ProcessSpottedEntityUpdate\020\305\002\022\027\n\022CS_UM_R" +
      "eloadEffect\020\306\002\022\026\n\021CS_UM_AdjustMoney\020\307\002\022\032" +
      "\n\025CS_UM_UpdateTeamMoney\020\310\002\022\034\n\027CS_UM_Stop" +
      "SpectatorMode\020\311\002\022\022\n\rCS_UM_KillCam\020\312\002\022\033\n\026" +
      "CS_UM_DesiredTimescale\020\313\002\022\033\n\026CS_UM_Curre",
      "ntTimescale\020\314\002\022\033\n\026CS_UM_AchievementEvent" +
      "\020\315\002\022\035\n\030CS_UM_MatchEndConditions\020\316\002\022\034\n\027CS" +
      "_UM_DisconnectToLobby\020\317\002\022\034\n\027CS_UM_Player" +
      "StatsUpdate\020\320\002\022\031\n\024CS_UM_WarmupHasEnded\020\322" +
      "\002\022\025\n\020CS_UM_ClientInfo\020\323\002\022\023\n\016CS_UM_XRankG" +
      "et\020\324\002\022\023\n\016CS_UM_XRankUpd\020\325\002\022\031\n\024CS_UM_Call" +
      "VoteFailed\020\331\002\022\024\n\017CS_UM_VoteStart\020\332\002\022\023\n\016C" +
      "S_UM_VotePass\020\333\002\022\025\n\020CS_UM_VoteFailed\020\334\002\022" +
      "\024\n\017CS_UM_VoteSetup\020\335\002\022\036\n\031CS_UM_ServerRan" +
      "kRevealAll\020\336\002\022\'\n\"CS_UM_SendLastKillerDam",
      "ageToClient\020\337\002\022\033\n\026CS_UM_ServerRankUpdate" +
      "\020\340\002\022\025\n\020CS_UM_ItemPickup\020\341\002\022\023\n\016CS_UM_Show" +
      "Menu\020\342\002\022\022\n\rCS_UM_BarTime\020\343\002\022\025\n\020CS_UM_Amm" +
      "oDenied\020\344\002\022\032\n\025CS_UM_MarkAchievement\020\345\002\022\033" +
      "\n\026CS_UM_MatchStatsUpdate\020\346\002\022\023\n\016CS_UM_Ite" +
      "mDrop\020\347\002\022\032\n\025CS_UM_GlowPropTurnOff\020\350\002\022\036\n\031" +
      "CS_UM_SendPlayerItemDrops\020\351\002\022\037\n\032CS_UM_Ro" +
      "undBackupFilenames\020\352\002\022\036\n\031CS_UM_SendPlaye" +
      "rItemFound\020\353\002\022\024\n\017CS_UM_ReportHit\020\354\002\022\023\n\016C" +
      "S_UM_XpUpdate\020\355\002\022\030\n\023CS_UM_QuestProgress\020",
      "\356\002\022\037\n\032CS_UM_ScoreLeaderboardData\020\357\002\022&\n!C" +
      "S_UM_PlayerDecalDigitalSignature\020\360\002\022\026\n\021C" +
      "S_UM_WeaponSound\020\361\002\022 \n\033CS_UM_UpdateScree" +
      "nHealthBar\020\362\002\022!\n\034CS_UM_EntityOutlineHigh" +
      "light\020\363\002\022\017\n\nCS_UM_SSUI\020\364\002\022\030\n\023CS_UM_Survi" +
      "valStats\020\365\002\022\035\n\030CS_UM_DisconnectToLobby2\020" +
      "\366\002\022#\n\036CS_UM_EndOfMatchAllPlayersData\020\367\002\022" +
      " \n\033CS_UM_PostRoundDamageReport\020\370\002\022\035\n\030CS_" +
      "UM_RoundEndReportData\020\373\002\022\033\n\026CS_UM_Curren" +
      "tRoundOdds\020\374\002\022\024\n\017CS_UM_DeepStats\020\375\002\022\022\n\rC",
      "S_UM_UtilMsg\020\376\002\022\024\n\017CS_UM_ShootInfo\020\377\002\022\030\n" +
      "\023CS_UM_CounterStrafe\020\201\003B8\n%skadistats.cl" +
      "arity.wire.csgo.s2.protoB\017CSGOS2MessageI" +
      "d"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
