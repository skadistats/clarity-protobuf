// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_id.proto

package skadistats.clarity.wire.dota.s2.proto;

public final class DOTAS2MessageId {
  private DOTAS2MessageId() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code NET_Messages}
   */
  public enum NET_Messages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>net_NOP = 0;</code>
     */
    net_NOP(0, 0),
    /**
     * <code>net_Disconnect = 1;</code>
     */
    net_Disconnect(1, 1),
    /**
     * <code>net_File = 2;</code>
     */
    net_File(2, 2),
    /**
     * <code>net_SplitScreenUser = 3;</code>
     */
    net_SplitScreenUser(3, 3),
    /**
     * <code>net_Tick = 4;</code>
     */
    net_Tick(4, 4),
    /**
     * <code>net_StringCmd = 5;</code>
     */
    net_StringCmd(5, 5),
    /**
     * <code>net_SetConVar = 6;</code>
     */
    net_SetConVar(6, 6),
    /**
     * <code>net_SignonState = 7;</code>
     */
    net_SignonState(7, 7),
    /**
     * <code>net_SpawnGroup_Load = 8;</code>
     */
    net_SpawnGroup_Load(8, 8),
    /**
     * <code>net_SpawnGroup_ManifestUpdate = 9;</code>
     */
    net_SpawnGroup_ManifestUpdate(9, 9),
    /**
     * <code>net_SpawnGroup_SetCreationTick = 11;</code>
     */
    net_SpawnGroup_SetCreationTick(10, 11),
    /**
     * <code>net_SpawnGroup_Unload = 12;</code>
     */
    net_SpawnGroup_Unload(11, 12),
    /**
     * <code>net_SpawnGroup_LoadCompleted = 13;</code>
     */
    net_SpawnGroup_LoadCompleted(12, 13),
    /**
     * <code>net_ReliableMessageEndMarker = 14;</code>
     */
    net_ReliableMessageEndMarker(13, 14),
    /**
     * <code>net_DebugOverlay = 15;</code>
     */
    net_DebugOverlay(14, 15),
    ;

    /**
     * <code>net_NOP = 0;</code>
     */
    public static final int net_NOP_VALUE = 0;
    /**
     * <code>net_Disconnect = 1;</code>
     */
    public static final int net_Disconnect_VALUE = 1;
    /**
     * <code>net_File = 2;</code>
     */
    public static final int net_File_VALUE = 2;
    /**
     * <code>net_SplitScreenUser = 3;</code>
     */
    public static final int net_SplitScreenUser_VALUE = 3;
    /**
     * <code>net_Tick = 4;</code>
     */
    public static final int net_Tick_VALUE = 4;
    /**
     * <code>net_StringCmd = 5;</code>
     */
    public static final int net_StringCmd_VALUE = 5;
    /**
     * <code>net_SetConVar = 6;</code>
     */
    public static final int net_SetConVar_VALUE = 6;
    /**
     * <code>net_SignonState = 7;</code>
     */
    public static final int net_SignonState_VALUE = 7;
    /**
     * <code>net_SpawnGroup_Load = 8;</code>
     */
    public static final int net_SpawnGroup_Load_VALUE = 8;
    /**
     * <code>net_SpawnGroup_ManifestUpdate = 9;</code>
     */
    public static final int net_SpawnGroup_ManifestUpdate_VALUE = 9;
    /**
     * <code>net_SpawnGroup_SetCreationTick = 11;</code>
     */
    public static final int net_SpawnGroup_SetCreationTick_VALUE = 11;
    /**
     * <code>net_SpawnGroup_Unload = 12;</code>
     */
    public static final int net_SpawnGroup_Unload_VALUE = 12;
    /**
     * <code>net_SpawnGroup_LoadCompleted = 13;</code>
     */
    public static final int net_SpawnGroup_LoadCompleted_VALUE = 13;
    /**
     * <code>net_ReliableMessageEndMarker = 14;</code>
     */
    public static final int net_ReliableMessageEndMarker_VALUE = 14;
    /**
     * <code>net_DebugOverlay = 15;</code>
     */
    public static final int net_DebugOverlay_VALUE = 15;


    public final int getNumber() { return value; }

    public static NET_Messages valueOf(int value) {
      switch (value) {
        case 0: return net_NOP;
        case 1: return net_Disconnect;
        case 2: return net_File;
        case 3: return net_SplitScreenUser;
        case 4: return net_Tick;
        case 5: return net_StringCmd;
        case 6: return net_SetConVar;
        case 7: return net_SignonState;
        case 8: return net_SpawnGroup_Load;
        case 9: return net_SpawnGroup_ManifestUpdate;
        case 11: return net_SpawnGroup_SetCreationTick;
        case 12: return net_SpawnGroup_Unload;
        case 13: return net_SpawnGroup_LoadCompleted;
        case 14: return net_ReliableMessageEndMarker;
        case 15: return net_DebugOverlay;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NET_Messages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<NET_Messages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NET_Messages>() {
            public NET_Messages findValueByNumber(int number) {
              return NET_Messages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.dota.s2.proto.DOTAS2MessageId.getDescriptor().getEnumTypes().get(0);
    }

    private static final NET_Messages[] VALUES = values();

    public static NET_Messages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private NET_Messages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:NET_Messages)
  }

  /**
   * Protobuf enum {@code CLC_Messages}
   */
  public enum CLC_Messages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>clc_ClientInfo = 20;</code>
     */
    clc_ClientInfo(0, 20),
    /**
     * <code>clc_Move = 21;</code>
     */
    clc_Move(1, 21),
    /**
     * <code>clc_VoiceData = 22;</code>
     */
    clc_VoiceData(2, 22),
    /**
     * <code>clc_BaselineAck = 23;</code>
     */
    clc_BaselineAck(3, 23),
    /**
     * <code>clc_ListenEvents = 24;</code>
     */
    clc_ListenEvents(4, 24),
    /**
     * <code>clc_RespondCvarValue = 25;</code>
     */
    clc_RespondCvarValue(5, 25),
    /**
     * <code>clc_FileCRCCheck = 26;</code>
     */
    clc_FileCRCCheck(6, 26),
    /**
     * <code>clc_LoadingProgress = 27;</code>
     */
    clc_LoadingProgress(7, 27),
    /**
     * <code>clc_SplitPlayerConnect = 28;</code>
     */
    clc_SplitPlayerConnect(8, 28),
    /**
     * <code>clc_ClientMessage = 29;</code>
     */
    clc_ClientMessage(9, 29),
    /**
     * <code>clc_SplitPlayerDisconnect = 30;</code>
     */
    clc_SplitPlayerDisconnect(10, 30),
    /**
     * <code>clc_ServerStatus = 31;</code>
     */
    clc_ServerStatus(11, 31),
    /**
     * <code>clc_ServerPing = 32;</code>
     */
    clc_ServerPing(12, 32),
    /**
     * <code>clc_RequestPause = 33;</code>
     */
    clc_RequestPause(13, 33),
    /**
     * <code>clc_CmdKeyValues = 34;</code>
     */
    clc_CmdKeyValues(14, 34),
    /**
     * <code>clc_RconServerDetails = 35;</code>
     */
    clc_RconServerDetails(15, 35),
    /**
     * <code>clc_HltvReplay = 36;</code>
     */
    clc_HltvReplay(16, 36),
    /**
     * <code>clc_Diagnostic = 37;</code>
     */
    clc_Diagnostic(17, 37),
    ;

    /**
     * <code>clc_ClientInfo = 20;</code>
     */
    public static final int clc_ClientInfo_VALUE = 20;
    /**
     * <code>clc_Move = 21;</code>
     */
    public static final int clc_Move_VALUE = 21;
    /**
     * <code>clc_VoiceData = 22;</code>
     */
    public static final int clc_VoiceData_VALUE = 22;
    /**
     * <code>clc_BaselineAck = 23;</code>
     */
    public static final int clc_BaselineAck_VALUE = 23;
    /**
     * <code>clc_ListenEvents = 24;</code>
     */
    public static final int clc_ListenEvents_VALUE = 24;
    /**
     * <code>clc_RespondCvarValue = 25;</code>
     */
    public static final int clc_RespondCvarValue_VALUE = 25;
    /**
     * <code>clc_FileCRCCheck = 26;</code>
     */
    public static final int clc_FileCRCCheck_VALUE = 26;
    /**
     * <code>clc_LoadingProgress = 27;</code>
     */
    public static final int clc_LoadingProgress_VALUE = 27;
    /**
     * <code>clc_SplitPlayerConnect = 28;</code>
     */
    public static final int clc_SplitPlayerConnect_VALUE = 28;
    /**
     * <code>clc_ClientMessage = 29;</code>
     */
    public static final int clc_ClientMessage_VALUE = 29;
    /**
     * <code>clc_SplitPlayerDisconnect = 30;</code>
     */
    public static final int clc_SplitPlayerDisconnect_VALUE = 30;
    /**
     * <code>clc_ServerStatus = 31;</code>
     */
    public static final int clc_ServerStatus_VALUE = 31;
    /**
     * <code>clc_ServerPing = 32;</code>
     */
    public static final int clc_ServerPing_VALUE = 32;
    /**
     * <code>clc_RequestPause = 33;</code>
     */
    public static final int clc_RequestPause_VALUE = 33;
    /**
     * <code>clc_CmdKeyValues = 34;</code>
     */
    public static final int clc_CmdKeyValues_VALUE = 34;
    /**
     * <code>clc_RconServerDetails = 35;</code>
     */
    public static final int clc_RconServerDetails_VALUE = 35;
    /**
     * <code>clc_HltvReplay = 36;</code>
     */
    public static final int clc_HltvReplay_VALUE = 36;
    /**
     * <code>clc_Diagnostic = 37;</code>
     */
    public static final int clc_Diagnostic_VALUE = 37;


    public final int getNumber() { return value; }

    public static CLC_Messages valueOf(int value) {
      switch (value) {
        case 20: return clc_ClientInfo;
        case 21: return clc_Move;
        case 22: return clc_VoiceData;
        case 23: return clc_BaselineAck;
        case 24: return clc_ListenEvents;
        case 25: return clc_RespondCvarValue;
        case 26: return clc_FileCRCCheck;
        case 27: return clc_LoadingProgress;
        case 28: return clc_SplitPlayerConnect;
        case 29: return clc_ClientMessage;
        case 30: return clc_SplitPlayerDisconnect;
        case 31: return clc_ServerStatus;
        case 32: return clc_ServerPing;
        case 33: return clc_RequestPause;
        case 34: return clc_CmdKeyValues;
        case 35: return clc_RconServerDetails;
        case 36: return clc_HltvReplay;
        case 37: return clc_Diagnostic;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CLC_Messages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CLC_Messages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CLC_Messages>() {
            public CLC_Messages findValueByNumber(int number) {
              return CLC_Messages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.dota.s2.proto.DOTAS2MessageId.getDescriptor().getEnumTypes().get(1);
    }

    private static final CLC_Messages[] VALUES = values();

    public static CLC_Messages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CLC_Messages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:CLC_Messages)
  }

  /**
   * Protobuf enum {@code SVC_Messages}
   */
  public enum SVC_Messages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>svc_ServerInfo = 40;</code>
     */
    svc_ServerInfo(0, 40),
    /**
     * <code>svc_FlattenedSerializer = 41;</code>
     */
    svc_FlattenedSerializer(1, 41),
    /**
     * <code>svc_ClassInfo = 42;</code>
     */
    svc_ClassInfo(2, 42),
    /**
     * <code>svc_SetPause = 43;</code>
     */
    svc_SetPause(3, 43),
    /**
     * <code>svc_CreateStringTable = 44;</code>
     */
    svc_CreateStringTable(4, 44),
    /**
     * <code>svc_UpdateStringTable = 45;</code>
     */
    svc_UpdateStringTable(5, 45),
    /**
     * <code>svc_VoiceInit = 46;</code>
     */
    svc_VoiceInit(6, 46),
    /**
     * <code>svc_VoiceData = 47;</code>
     */
    svc_VoiceData(7, 47),
    /**
     * <code>svc_Print = 48;</code>
     */
    svc_Print(8, 48),
    /**
     * <code>svc_Sounds = 49;</code>
     */
    svc_Sounds(9, 49),
    /**
     * <code>svc_SetView = 50;</code>
     */
    svc_SetView(10, 50),
    /**
     * <code>svc_ClearAllStringTables = 51;</code>
     */
    svc_ClearAllStringTables(11, 51),
    /**
     * <code>svc_CmdKeyValues = 52;</code>
     */
    svc_CmdKeyValues(12, 52),
    /**
     * <code>svc_BSPDecal = 53;</code>
     */
    svc_BSPDecal(13, 53),
    /**
     * <code>svc_SplitScreen = 54;</code>
     */
    svc_SplitScreen(14, 54),
    /**
     * <code>svc_PacketEntities = 55;</code>
     */
    svc_PacketEntities(15, 55),
    /**
     * <code>svc_Prefetch = 56;</code>
     */
    svc_Prefetch(16, 56),
    /**
     * <code>svc_Menu = 57;</code>
     */
    svc_Menu(17, 57),
    /**
     * <code>svc_GetCvarValue = 58;</code>
     */
    svc_GetCvarValue(18, 58),
    /**
     * <code>svc_StopSound = 59;</code>
     */
    svc_StopSound(19, 59),
    /**
     * <code>svc_PeerList = 60;</code>
     */
    svc_PeerList(20, 60),
    /**
     * <code>svc_PacketReliable = 61;</code>
     */
    svc_PacketReliable(21, 61),
    /**
     * <code>svc_HLTVStatus = 62;</code>
     */
    svc_HLTVStatus(22, 62),
    /**
     * <code>svc_ServerSteamID = 63;</code>
     */
    svc_ServerSteamID(23, 63),
    /**
     * <code>svc_FullFrameSplit = 70;</code>
     */
    svc_FullFrameSplit(24, 70),
    /**
     * <code>svc_RconServerDetails = 71;</code>
     */
    svc_RconServerDetails(25, 71),
    /**
     * <code>svc_UserMessage = 72;</code>
     */
    svc_UserMessage(26, 72),
    /**
     * <code>svc_HltvReplay = 73;</code>
     */
    svc_HltvReplay(27, 73),
    /**
     * <code>svc_Broadcast_Command = 74;</code>
     */
    svc_Broadcast_Command(28, 74),
    /**
     * <code>svc_HltvFixupOperatorStatus = 75;</code>
     */
    svc_HltvFixupOperatorStatus(29, 75),
    /**
     * <code>svc_UserCmds = 76;</code>
     */
    svc_UserCmds(30, 76),
    ;

    /**
     * <code>svc_ServerInfo = 40;</code>
     */
    public static final int svc_ServerInfo_VALUE = 40;
    /**
     * <code>svc_FlattenedSerializer = 41;</code>
     */
    public static final int svc_FlattenedSerializer_VALUE = 41;
    /**
     * <code>svc_ClassInfo = 42;</code>
     */
    public static final int svc_ClassInfo_VALUE = 42;
    /**
     * <code>svc_SetPause = 43;</code>
     */
    public static final int svc_SetPause_VALUE = 43;
    /**
     * <code>svc_CreateStringTable = 44;</code>
     */
    public static final int svc_CreateStringTable_VALUE = 44;
    /**
     * <code>svc_UpdateStringTable = 45;</code>
     */
    public static final int svc_UpdateStringTable_VALUE = 45;
    /**
     * <code>svc_VoiceInit = 46;</code>
     */
    public static final int svc_VoiceInit_VALUE = 46;
    /**
     * <code>svc_VoiceData = 47;</code>
     */
    public static final int svc_VoiceData_VALUE = 47;
    /**
     * <code>svc_Print = 48;</code>
     */
    public static final int svc_Print_VALUE = 48;
    /**
     * <code>svc_Sounds = 49;</code>
     */
    public static final int svc_Sounds_VALUE = 49;
    /**
     * <code>svc_SetView = 50;</code>
     */
    public static final int svc_SetView_VALUE = 50;
    /**
     * <code>svc_ClearAllStringTables = 51;</code>
     */
    public static final int svc_ClearAllStringTables_VALUE = 51;
    /**
     * <code>svc_CmdKeyValues = 52;</code>
     */
    public static final int svc_CmdKeyValues_VALUE = 52;
    /**
     * <code>svc_BSPDecal = 53;</code>
     */
    public static final int svc_BSPDecal_VALUE = 53;
    /**
     * <code>svc_SplitScreen = 54;</code>
     */
    public static final int svc_SplitScreen_VALUE = 54;
    /**
     * <code>svc_PacketEntities = 55;</code>
     */
    public static final int svc_PacketEntities_VALUE = 55;
    /**
     * <code>svc_Prefetch = 56;</code>
     */
    public static final int svc_Prefetch_VALUE = 56;
    /**
     * <code>svc_Menu = 57;</code>
     */
    public static final int svc_Menu_VALUE = 57;
    /**
     * <code>svc_GetCvarValue = 58;</code>
     */
    public static final int svc_GetCvarValue_VALUE = 58;
    /**
     * <code>svc_StopSound = 59;</code>
     */
    public static final int svc_StopSound_VALUE = 59;
    /**
     * <code>svc_PeerList = 60;</code>
     */
    public static final int svc_PeerList_VALUE = 60;
    /**
     * <code>svc_PacketReliable = 61;</code>
     */
    public static final int svc_PacketReliable_VALUE = 61;
    /**
     * <code>svc_HLTVStatus = 62;</code>
     */
    public static final int svc_HLTVStatus_VALUE = 62;
    /**
     * <code>svc_ServerSteamID = 63;</code>
     */
    public static final int svc_ServerSteamID_VALUE = 63;
    /**
     * <code>svc_FullFrameSplit = 70;</code>
     */
    public static final int svc_FullFrameSplit_VALUE = 70;
    /**
     * <code>svc_RconServerDetails = 71;</code>
     */
    public static final int svc_RconServerDetails_VALUE = 71;
    /**
     * <code>svc_UserMessage = 72;</code>
     */
    public static final int svc_UserMessage_VALUE = 72;
    /**
     * <code>svc_HltvReplay = 73;</code>
     */
    public static final int svc_HltvReplay_VALUE = 73;
    /**
     * <code>svc_Broadcast_Command = 74;</code>
     */
    public static final int svc_Broadcast_Command_VALUE = 74;
    /**
     * <code>svc_HltvFixupOperatorStatus = 75;</code>
     */
    public static final int svc_HltvFixupOperatorStatus_VALUE = 75;
    /**
     * <code>svc_UserCmds = 76;</code>
     */
    public static final int svc_UserCmds_VALUE = 76;


    public final int getNumber() { return value; }

    public static SVC_Messages valueOf(int value) {
      switch (value) {
        case 40: return svc_ServerInfo;
        case 41: return svc_FlattenedSerializer;
        case 42: return svc_ClassInfo;
        case 43: return svc_SetPause;
        case 44: return svc_CreateStringTable;
        case 45: return svc_UpdateStringTable;
        case 46: return svc_VoiceInit;
        case 47: return svc_VoiceData;
        case 48: return svc_Print;
        case 49: return svc_Sounds;
        case 50: return svc_SetView;
        case 51: return svc_ClearAllStringTables;
        case 52: return svc_CmdKeyValues;
        case 53: return svc_BSPDecal;
        case 54: return svc_SplitScreen;
        case 55: return svc_PacketEntities;
        case 56: return svc_Prefetch;
        case 57: return svc_Menu;
        case 58: return svc_GetCvarValue;
        case 59: return svc_StopSound;
        case 60: return svc_PeerList;
        case 61: return svc_PacketReliable;
        case 62: return svc_HLTVStatus;
        case 63: return svc_ServerSteamID;
        case 70: return svc_FullFrameSplit;
        case 71: return svc_RconServerDetails;
        case 72: return svc_UserMessage;
        case 73: return svc_HltvReplay;
        case 74: return svc_Broadcast_Command;
        case 75: return svc_HltvFixupOperatorStatus;
        case 76: return svc_UserCmds;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SVC_Messages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SVC_Messages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SVC_Messages>() {
            public SVC_Messages findValueByNumber(int number) {
              return SVC_Messages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.dota.s2.proto.DOTAS2MessageId.getDescriptor().getEnumTypes().get(2);
    }

    private static final SVC_Messages[] VALUES = values();

    public static SVC_Messages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SVC_Messages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SVC_Messages)
  }

  /**
   * Protobuf enum {@code EBaseUserMessages}
   */
  public enum EBaseUserMessages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UM_AchievementEvent = 101;</code>
     */
    UM_AchievementEvent(0, 101),
    /**
     * <code>UM_CloseCaption = 102;</code>
     */
    UM_CloseCaption(1, 102),
    /**
     * <code>UM_CloseCaptionDirect = 103;</code>
     */
    UM_CloseCaptionDirect(2, 103),
    /**
     * <code>UM_CurrentTimescale = 104;</code>
     */
    UM_CurrentTimescale(3, 104),
    /**
     * <code>UM_DesiredTimescale = 105;</code>
     */
    UM_DesiredTimescale(4, 105),
    /**
     * <code>UM_Fade = 106;</code>
     */
    UM_Fade(5, 106),
    /**
     * <code>UM_GameTitle = 107;</code>
     */
    UM_GameTitle(6, 107),
    /**
     * <code>UM_HintText = 109;</code>
     */
    UM_HintText(7, 109),
    /**
     * <code>UM_HudMsg = 110;</code>
     */
    UM_HudMsg(8, 110),
    /**
     * <code>UM_HudText = 111;</code>
     */
    UM_HudText(9, 111),
    /**
     * <code>UM_KeyHintText = 112;</code>
     */
    UM_KeyHintText(10, 112),
    /**
     * <code>UM_ColoredText = 113;</code>
     */
    UM_ColoredText(11, 113),
    /**
     * <code>UM_RequestState = 114;</code>
     */
    UM_RequestState(12, 114),
    /**
     * <code>UM_ResetHUD = 115;</code>
     */
    UM_ResetHUD(13, 115),
    /**
     * <code>UM_Rumble = 116;</code>
     */
    UM_Rumble(14, 116),
    /**
     * <code>UM_SayText = 117;</code>
     */
    UM_SayText(15, 117),
    /**
     * <code>UM_SayText2 = 118;</code>
     */
    UM_SayText2(16, 118),
    /**
     * <code>UM_SayTextChannel = 119;</code>
     */
    UM_SayTextChannel(17, 119),
    /**
     * <code>UM_Shake = 120;</code>
     */
    UM_Shake(18, 120),
    /**
     * <code>UM_ShakeDir = 121;</code>
     */
    UM_ShakeDir(19, 121),
    /**
     * <code>UM_TextMsg = 124;</code>
     */
    UM_TextMsg(20, 124),
    /**
     * <code>UM_ScreenTilt = 125;</code>
     */
    UM_ScreenTilt(21, 125),
    /**
     * <code>UM_Train = 126;</code>
     */
    UM_Train(22, 126),
    /**
     * <code>UM_VGUIMenu = 127;</code>
     */
    UM_VGUIMenu(23, 127),
    /**
     * <code>UM_VoiceMask = 128;</code>
     */
    UM_VoiceMask(24, 128),
    /**
     * <code>UM_VoiceSubtitle = 129;</code>
     */
    UM_VoiceSubtitle(25, 129),
    /**
     * <code>UM_SendAudio = 130;</code>
     */
    UM_SendAudio(26, 130),
    /**
     * <code>UM_ItemPickup = 131;</code>
     */
    UM_ItemPickup(27, 131),
    /**
     * <code>UM_AmmoDenied = 132;</code>
     */
    UM_AmmoDenied(28, 132),
    /**
     * <code>UM_CrosshairAngle = 133;</code>
     */
    UM_CrosshairAngle(29, 133),
    /**
     * <code>UM_ShowMenu = 134;</code>
     */
    UM_ShowMenu(30, 134),
    /**
     * <code>UM_CreditsMsg = 135;</code>
     */
    UM_CreditsMsg(31, 135),
    /**
     * <code>UM_CloseCaptionPlaceholder = 142;</code>
     */
    UM_CloseCaptionPlaceholder(32, 142),
    /**
     * <code>UM_CameraTransition = 143;</code>
     */
    UM_CameraTransition(33, 143),
    /**
     * <code>UM_AudioParameter = 144;</code>
     */
    UM_AudioParameter(34, 144),
    /**
     * <code>UM_ParticleManager = 145;</code>
     */
    UM_ParticleManager(35, 145),
    /**
     * <code>UM_HudError = 146;</code>
     */
    UM_HudError(36, 146),
    /**
     * <code>UM_CustomGameEvent = 148;</code>
     */
    UM_CustomGameEvent(37, 148),
    /**
     * <code>UM_AnimGraphUpdate = 149;</code>
     */
    UM_AnimGraphUpdate(38, 149),
    /**
     * <code>UM_HapticsManagerPulse = 150;</code>
     */
    UM_HapticsManagerPulse(39, 150),
    /**
     * <code>UM_HapticsManagerEffect = 151;</code>
     */
    UM_HapticsManagerEffect(40, 151),
    /**
     * <code>UM_CommandQueueState = 152;</code>
     */
    UM_CommandQueueState(41, 152),
    /**
     * <code>UM_UpdateCssClasses = 153;</code>
     */
    UM_UpdateCssClasses(42, 153),
    /**
     * <code>UM_ServerFrameTime = 154;</code>
     */
    UM_ServerFrameTime(43, 154),
    /**
     * <code>UM_LagCompensationError = 155;</code>
     */
    UM_LagCompensationError(44, 155),
    /**
     * <code>UM_RequestDllStatus = 156;</code>
     */
    UM_RequestDllStatus(45, 156),
    /**
     * <code>UM_RequestUtilAction = 157;</code>
     */
    UM_RequestUtilAction(46, 157),
    /**
     * <code>UM_UtilActionResponse = 158;</code>
     */
    UM_UtilActionResponse(47, 158),
    /**
     * <code>UM_DllStatusResponse = 159;</code>
     */
    UM_DllStatusResponse(48, 159),
    /**
     * <code>UM_RequestInventory = 160;</code>
     */
    UM_RequestInventory(49, 160),
    /**
     * <code>UM_InventoryResponse = 161;</code>
     */
    UM_InventoryResponse(50, 161),
    /**
     * <code>UM_RequestDiagnostic = 162;</code>
     */
    UM_RequestDiagnostic(51, 162),
    /**
     * <code>UM_DiagnosticResponse = 163;</code>
     */
    UM_DiagnosticResponse(52, 163),
    /**
     * <code>UM_ExtraUserData = 164;</code>
     */
    UM_ExtraUserData(53, 164),
    /**
     * <code>UM_NotifyResponseFound = 165;</code>
     */
    UM_NotifyResponseFound(54, 165),
    /**
     * <code>UM_PlayResponseConditional = 166;</code>
     */
    UM_PlayResponseConditional(55, 166),
    /**
     * <code>UM_MAX_BASE = 200;</code>
     */
    UM_MAX_BASE(56, 200),
    ;

    /**
     * <code>UM_AchievementEvent = 101;</code>
     */
    public static final int UM_AchievementEvent_VALUE = 101;
    /**
     * <code>UM_CloseCaption = 102;</code>
     */
    public static final int UM_CloseCaption_VALUE = 102;
    /**
     * <code>UM_CloseCaptionDirect = 103;</code>
     */
    public static final int UM_CloseCaptionDirect_VALUE = 103;
    /**
     * <code>UM_CurrentTimescale = 104;</code>
     */
    public static final int UM_CurrentTimescale_VALUE = 104;
    /**
     * <code>UM_DesiredTimescale = 105;</code>
     */
    public static final int UM_DesiredTimescale_VALUE = 105;
    /**
     * <code>UM_Fade = 106;</code>
     */
    public static final int UM_Fade_VALUE = 106;
    /**
     * <code>UM_GameTitle = 107;</code>
     */
    public static final int UM_GameTitle_VALUE = 107;
    /**
     * <code>UM_HintText = 109;</code>
     */
    public static final int UM_HintText_VALUE = 109;
    /**
     * <code>UM_HudMsg = 110;</code>
     */
    public static final int UM_HudMsg_VALUE = 110;
    /**
     * <code>UM_HudText = 111;</code>
     */
    public static final int UM_HudText_VALUE = 111;
    /**
     * <code>UM_KeyHintText = 112;</code>
     */
    public static final int UM_KeyHintText_VALUE = 112;
    /**
     * <code>UM_ColoredText = 113;</code>
     */
    public static final int UM_ColoredText_VALUE = 113;
    /**
     * <code>UM_RequestState = 114;</code>
     */
    public static final int UM_RequestState_VALUE = 114;
    /**
     * <code>UM_ResetHUD = 115;</code>
     */
    public static final int UM_ResetHUD_VALUE = 115;
    /**
     * <code>UM_Rumble = 116;</code>
     */
    public static final int UM_Rumble_VALUE = 116;
    /**
     * <code>UM_SayText = 117;</code>
     */
    public static final int UM_SayText_VALUE = 117;
    /**
     * <code>UM_SayText2 = 118;</code>
     */
    public static final int UM_SayText2_VALUE = 118;
    /**
     * <code>UM_SayTextChannel = 119;</code>
     */
    public static final int UM_SayTextChannel_VALUE = 119;
    /**
     * <code>UM_Shake = 120;</code>
     */
    public static final int UM_Shake_VALUE = 120;
    /**
     * <code>UM_ShakeDir = 121;</code>
     */
    public static final int UM_ShakeDir_VALUE = 121;
    /**
     * <code>UM_TextMsg = 124;</code>
     */
    public static final int UM_TextMsg_VALUE = 124;
    /**
     * <code>UM_ScreenTilt = 125;</code>
     */
    public static final int UM_ScreenTilt_VALUE = 125;
    /**
     * <code>UM_Train = 126;</code>
     */
    public static final int UM_Train_VALUE = 126;
    /**
     * <code>UM_VGUIMenu = 127;</code>
     */
    public static final int UM_VGUIMenu_VALUE = 127;
    /**
     * <code>UM_VoiceMask = 128;</code>
     */
    public static final int UM_VoiceMask_VALUE = 128;
    /**
     * <code>UM_VoiceSubtitle = 129;</code>
     */
    public static final int UM_VoiceSubtitle_VALUE = 129;
    /**
     * <code>UM_SendAudio = 130;</code>
     */
    public static final int UM_SendAudio_VALUE = 130;
    /**
     * <code>UM_ItemPickup = 131;</code>
     */
    public static final int UM_ItemPickup_VALUE = 131;
    /**
     * <code>UM_AmmoDenied = 132;</code>
     */
    public static final int UM_AmmoDenied_VALUE = 132;
    /**
     * <code>UM_CrosshairAngle = 133;</code>
     */
    public static final int UM_CrosshairAngle_VALUE = 133;
    /**
     * <code>UM_ShowMenu = 134;</code>
     */
    public static final int UM_ShowMenu_VALUE = 134;
    /**
     * <code>UM_CreditsMsg = 135;</code>
     */
    public static final int UM_CreditsMsg_VALUE = 135;
    /**
     * <code>UM_CloseCaptionPlaceholder = 142;</code>
     */
    public static final int UM_CloseCaptionPlaceholder_VALUE = 142;
    /**
     * <code>UM_CameraTransition = 143;</code>
     */
    public static final int UM_CameraTransition_VALUE = 143;
    /**
     * <code>UM_AudioParameter = 144;</code>
     */
    public static final int UM_AudioParameter_VALUE = 144;
    /**
     * <code>UM_ParticleManager = 145;</code>
     */
    public static final int UM_ParticleManager_VALUE = 145;
    /**
     * <code>UM_HudError = 146;</code>
     */
    public static final int UM_HudError_VALUE = 146;
    /**
     * <code>UM_CustomGameEvent = 148;</code>
     */
    public static final int UM_CustomGameEvent_VALUE = 148;
    /**
     * <code>UM_AnimGraphUpdate = 149;</code>
     */
    public static final int UM_AnimGraphUpdate_VALUE = 149;
    /**
     * <code>UM_HapticsManagerPulse = 150;</code>
     */
    public static final int UM_HapticsManagerPulse_VALUE = 150;
    /**
     * <code>UM_HapticsManagerEffect = 151;</code>
     */
    public static final int UM_HapticsManagerEffect_VALUE = 151;
    /**
     * <code>UM_CommandQueueState = 152;</code>
     */
    public static final int UM_CommandQueueState_VALUE = 152;
    /**
     * <code>UM_UpdateCssClasses = 153;</code>
     */
    public static final int UM_UpdateCssClasses_VALUE = 153;
    /**
     * <code>UM_ServerFrameTime = 154;</code>
     */
    public static final int UM_ServerFrameTime_VALUE = 154;
    /**
     * <code>UM_LagCompensationError = 155;</code>
     */
    public static final int UM_LagCompensationError_VALUE = 155;
    /**
     * <code>UM_RequestDllStatus = 156;</code>
     */
    public static final int UM_RequestDllStatus_VALUE = 156;
    /**
     * <code>UM_RequestUtilAction = 157;</code>
     */
    public static final int UM_RequestUtilAction_VALUE = 157;
    /**
     * <code>UM_UtilActionResponse = 158;</code>
     */
    public static final int UM_UtilActionResponse_VALUE = 158;
    /**
     * <code>UM_DllStatusResponse = 159;</code>
     */
    public static final int UM_DllStatusResponse_VALUE = 159;
    /**
     * <code>UM_RequestInventory = 160;</code>
     */
    public static final int UM_RequestInventory_VALUE = 160;
    /**
     * <code>UM_InventoryResponse = 161;</code>
     */
    public static final int UM_InventoryResponse_VALUE = 161;
    /**
     * <code>UM_RequestDiagnostic = 162;</code>
     */
    public static final int UM_RequestDiagnostic_VALUE = 162;
    /**
     * <code>UM_DiagnosticResponse = 163;</code>
     */
    public static final int UM_DiagnosticResponse_VALUE = 163;
    /**
     * <code>UM_ExtraUserData = 164;</code>
     */
    public static final int UM_ExtraUserData_VALUE = 164;
    /**
     * <code>UM_NotifyResponseFound = 165;</code>
     */
    public static final int UM_NotifyResponseFound_VALUE = 165;
    /**
     * <code>UM_PlayResponseConditional = 166;</code>
     */
    public static final int UM_PlayResponseConditional_VALUE = 166;
    /**
     * <code>UM_MAX_BASE = 200;</code>
     */
    public static final int UM_MAX_BASE_VALUE = 200;


    public final int getNumber() { return value; }

    public static EBaseUserMessages valueOf(int value) {
      switch (value) {
        case 101: return UM_AchievementEvent;
        case 102: return UM_CloseCaption;
        case 103: return UM_CloseCaptionDirect;
        case 104: return UM_CurrentTimescale;
        case 105: return UM_DesiredTimescale;
        case 106: return UM_Fade;
        case 107: return UM_GameTitle;
        case 109: return UM_HintText;
        case 110: return UM_HudMsg;
        case 111: return UM_HudText;
        case 112: return UM_KeyHintText;
        case 113: return UM_ColoredText;
        case 114: return UM_RequestState;
        case 115: return UM_ResetHUD;
        case 116: return UM_Rumble;
        case 117: return UM_SayText;
        case 118: return UM_SayText2;
        case 119: return UM_SayTextChannel;
        case 120: return UM_Shake;
        case 121: return UM_ShakeDir;
        case 124: return UM_TextMsg;
        case 125: return UM_ScreenTilt;
        case 126: return UM_Train;
        case 127: return UM_VGUIMenu;
        case 128: return UM_VoiceMask;
        case 129: return UM_VoiceSubtitle;
        case 130: return UM_SendAudio;
        case 131: return UM_ItemPickup;
        case 132: return UM_AmmoDenied;
        case 133: return UM_CrosshairAngle;
        case 134: return UM_ShowMenu;
        case 135: return UM_CreditsMsg;
        case 142: return UM_CloseCaptionPlaceholder;
        case 143: return UM_CameraTransition;
        case 144: return UM_AudioParameter;
        case 145: return UM_ParticleManager;
        case 146: return UM_HudError;
        case 148: return UM_CustomGameEvent;
        case 149: return UM_AnimGraphUpdate;
        case 150: return UM_HapticsManagerPulse;
        case 151: return UM_HapticsManagerEffect;
        case 152: return UM_CommandQueueState;
        case 153: return UM_UpdateCssClasses;
        case 154: return UM_ServerFrameTime;
        case 155: return UM_LagCompensationError;
        case 156: return UM_RequestDllStatus;
        case 157: return UM_RequestUtilAction;
        case 158: return UM_UtilActionResponse;
        case 159: return UM_DllStatusResponse;
        case 160: return UM_RequestInventory;
        case 161: return UM_InventoryResponse;
        case 162: return UM_RequestDiagnostic;
        case 163: return UM_DiagnosticResponse;
        case 164: return UM_ExtraUserData;
        case 165: return UM_NotifyResponseFound;
        case 166: return UM_PlayResponseConditional;
        case 200: return UM_MAX_BASE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EBaseUserMessages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EBaseUserMessages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EBaseUserMessages>() {
            public EBaseUserMessages findValueByNumber(int number) {
              return EBaseUserMessages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.dota.s2.proto.DOTAS2MessageId.getDescriptor().getEnumTypes().get(3);
    }

    private static final EBaseUserMessages[] VALUES = values();

    public static EBaseUserMessages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EBaseUserMessages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EBaseUserMessages)
  }

  /**
   * Protobuf enum {@code EBaseEntityMessages}
   */
  public enum EBaseEntityMessages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EM_PlayJingle = 136;</code>
     */
    EM_PlayJingle(0, 136),
    /**
     * <code>EM_ScreenOverlay = 137;</code>
     */
    EM_ScreenOverlay(1, 137),
    /**
     * <code>EM_RemoveAllDecals = 138;</code>
     */
    EM_RemoveAllDecals(2, 138),
    /**
     * <code>EM_PropagateForce = 139;</code>
     */
    EM_PropagateForce(3, 139),
    /**
     * <code>EM_DoSpark = 140;</code>
     */
    EM_DoSpark(4, 140),
    /**
     * <code>EM_FixAngle = 141;</code>
     */
    EM_FixAngle(5, 141),
    ;

    /**
     * <code>EM_PlayJingle = 136;</code>
     */
    public static final int EM_PlayJingle_VALUE = 136;
    /**
     * <code>EM_ScreenOverlay = 137;</code>
     */
    public static final int EM_ScreenOverlay_VALUE = 137;
    /**
     * <code>EM_RemoveAllDecals = 138;</code>
     */
    public static final int EM_RemoveAllDecals_VALUE = 138;
    /**
     * <code>EM_PropagateForce = 139;</code>
     */
    public static final int EM_PropagateForce_VALUE = 139;
    /**
     * <code>EM_DoSpark = 140;</code>
     */
    public static final int EM_DoSpark_VALUE = 140;
    /**
     * <code>EM_FixAngle = 141;</code>
     */
    public static final int EM_FixAngle_VALUE = 141;


    public final int getNumber() { return value; }

    public static EBaseEntityMessages valueOf(int value) {
      switch (value) {
        case 136: return EM_PlayJingle;
        case 137: return EM_ScreenOverlay;
        case 138: return EM_RemoveAllDecals;
        case 139: return EM_PropagateForce;
        case 140: return EM_DoSpark;
        case 141: return EM_FixAngle;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EBaseEntityMessages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EBaseEntityMessages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EBaseEntityMessages>() {
            public EBaseEntityMessages findValueByNumber(int number) {
              return EBaseEntityMessages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.dota.s2.proto.DOTAS2MessageId.getDescriptor().getEnumTypes().get(4);
    }

    private static final EBaseEntityMessages[] VALUES = values();

    public static EBaseEntityMessages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EBaseEntityMessages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EBaseEntityMessages)
  }

  /**
   * Protobuf enum {@code EDotaUserMessages}
   */
  public enum EDotaUserMessages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DOTA_UM_AddUnitToSelection = 464;</code>
     */
    DOTA_UM_AddUnitToSelection(0, 464),
    /**
     * <code>DOTA_UM_AIDebugLine = 465;</code>
     */
    DOTA_UM_AIDebugLine(1, 465),
    /**
     * <code>DOTA_UM_ChatEvent = 466;</code>
     */
    DOTA_UM_ChatEvent(2, 466),
    /**
     * <code>DOTA_UM_CombatHeroPositions = 467;</code>
     */
    DOTA_UM_CombatHeroPositions(3, 467),
    /**
     * <code>DOTA_UM_CombatLogData = 468;</code>
     */
    DOTA_UM_CombatLogData(4, 468),
    /**
     * <code>DOTA_UM_CombatLogBulkData = 470;</code>
     */
    DOTA_UM_CombatLogBulkData(5, 470),
    /**
     * <code>DOTA_UM_CreateLinearProjectile = 471;</code>
     */
    DOTA_UM_CreateLinearProjectile(6, 471),
    /**
     * <code>DOTA_UM_DestroyLinearProjectile = 472;</code>
     */
    DOTA_UM_DestroyLinearProjectile(7, 472),
    /**
     * <code>DOTA_UM_DodgeTrackingProjectiles = 473;</code>
     */
    DOTA_UM_DodgeTrackingProjectiles(8, 473),
    /**
     * <code>DOTA_UM_GlobalLightColor = 474;</code>
     */
    DOTA_UM_GlobalLightColor(9, 474),
    /**
     * <code>DOTA_UM_GlobalLightDirection = 475;</code>
     */
    DOTA_UM_GlobalLightDirection(10, 475),
    /**
     * <code>DOTA_UM_InvalidCommand = 476;</code>
     */
    DOTA_UM_InvalidCommand(11, 476),
    /**
     * <code>DOTA_UM_LocationPing = 477;</code>
     */
    DOTA_UM_LocationPing(12, 477),
    /**
     * <code>DOTA_UM_MapLine = 478;</code>
     */
    DOTA_UM_MapLine(13, 478),
    /**
     * <code>DOTA_UM_MiniKillCamInfo = 479;</code>
     */
    DOTA_UM_MiniKillCamInfo(14, 479),
    /**
     * <code>DOTA_UM_MinimapDebugPoint = 480;</code>
     */
    DOTA_UM_MinimapDebugPoint(15, 480),
    /**
     * <code>DOTA_UM_MinimapEvent = 481;</code>
     */
    DOTA_UM_MinimapEvent(16, 481),
    /**
     * <code>DOTA_UM_NevermoreRequiem = 482;</code>
     */
    DOTA_UM_NevermoreRequiem(17, 482),
    /**
     * <code>DOTA_UM_OverheadEvent = 483;</code>
     */
    DOTA_UM_OverheadEvent(18, 483),
    /**
     * <code>DOTA_UM_SetNextAutobuyItem = 484;</code>
     */
    DOTA_UM_SetNextAutobuyItem(19, 484),
    /**
     * <code>DOTA_UM_SharedCooldown = 485;</code>
     */
    DOTA_UM_SharedCooldown(20, 485),
    /**
     * <code>DOTA_UM_SpectatorPlayerClick = 486;</code>
     */
    DOTA_UM_SpectatorPlayerClick(21, 486),
    /**
     * <code>DOTA_UM_TutorialTipInfo = 487;</code>
     */
    DOTA_UM_TutorialTipInfo(22, 487),
    /**
     * <code>DOTA_UM_UnitEvent = 488;</code>
     */
    DOTA_UM_UnitEvent(23, 488),
    /**
     * <code>DOTA_UM_ParticleManager = 489;</code>
     */
    DOTA_UM_ParticleManager(24, 489),
    /**
     * <code>DOTA_UM_BotChat = 490;</code>
     */
    DOTA_UM_BotChat(25, 490),
    /**
     * <code>DOTA_UM_HudError = 491;</code>
     */
    DOTA_UM_HudError(26, 491),
    /**
     * <code>DOTA_UM_ItemPurchased = 492;</code>
     */
    DOTA_UM_ItemPurchased(27, 492),
    /**
     * <code>DOTA_UM_Ping = 493;</code>
     */
    DOTA_UM_Ping(28, 493),
    /**
     * <code>DOTA_UM_ItemFound = 494;</code>
     */
    DOTA_UM_ItemFound(29, 494),
    /**
     * <code>DOTA_UM_CharacterSpeakConcept = 495;</code>
     */
    DOTA_UM_CharacterSpeakConcept(30, 495),
    /**
     * <code>DOTA_UM_SwapVerify = 496;</code>
     */
    DOTA_UM_SwapVerify(31, 496),
    /**
     * <code>DOTA_UM_WorldLine = 497;</code>
     */
    DOTA_UM_WorldLine(32, 497),
    /**
     * <code>DOTA_UM_TournamentDrop = 498;</code>
     */
    DOTA_UM_TournamentDrop(33, 498),
    /**
     * <code>DOTA_UM_ItemAlert = 499;</code>
     */
    DOTA_UM_ItemAlert(34, 499),
    /**
     * <code>DOTA_UM_HalloweenDrops = 500;</code>
     */
    DOTA_UM_HalloweenDrops(35, 500),
    /**
     * <code>DOTA_UM_ChatWheel = 501;</code>
     */
    DOTA_UM_ChatWheel(36, 501),
    /**
     * <code>DOTA_UM_ReceivedXmasGift = 502;</code>
     */
    DOTA_UM_ReceivedXmasGift(37, 502),
    /**
     * <code>DOTA_UM_UpdateSharedContent = 503;</code>
     */
    DOTA_UM_UpdateSharedContent(38, 503),
    /**
     * <code>DOTA_UM_TutorialRequestExp = 504;</code>
     */
    DOTA_UM_TutorialRequestExp(39, 504),
    /**
     * <code>DOTA_UM_TutorialPingMinimap = 505;</code>
     */
    DOTA_UM_TutorialPingMinimap(40, 505),
    /**
     * <code>DOTA_UM_GamerulesStateChanged = 506;</code>
     */
    DOTA_UM_GamerulesStateChanged(41, 506),
    /**
     * <code>DOTA_UM_ShowSurvey = 507;</code>
     */
    DOTA_UM_ShowSurvey(42, 507),
    /**
     * <code>DOTA_UM_TutorialFade = 508;</code>
     */
    DOTA_UM_TutorialFade(43, 508),
    /**
     * <code>DOTA_UM_AddQuestLogEntry = 509;</code>
     */
    DOTA_UM_AddQuestLogEntry(44, 509),
    /**
     * <code>DOTA_UM_SendStatPopup = 510;</code>
     */
    DOTA_UM_SendStatPopup(45, 510),
    /**
     * <code>DOTA_UM_TutorialFinish = 511;</code>
     */
    DOTA_UM_TutorialFinish(46, 511),
    /**
     * <code>DOTA_UM_SendRoshanPopup = 512;</code>
     */
    DOTA_UM_SendRoshanPopup(47, 512),
    /**
     * <code>DOTA_UM_SendGenericToolTip = 513;</code>
     */
    DOTA_UM_SendGenericToolTip(48, 513),
    /**
     * <code>DOTA_UM_SendFinalGold = 514;</code>
     */
    DOTA_UM_SendFinalGold(49, 514),
    /**
     * <code>DOTA_UM_CustomMsg = 515;</code>
     */
    DOTA_UM_CustomMsg(50, 515),
    /**
     * <code>DOTA_UM_CoachHUDPing = 516;</code>
     */
    DOTA_UM_CoachHUDPing(51, 516),
    /**
     * <code>DOTA_UM_ClientLoadGridNav = 517;</code>
     */
    DOTA_UM_ClientLoadGridNav(52, 517),
    /**
     * <code>DOTA_UM_TE_Projectile = 518;</code>
     */
    DOTA_UM_TE_Projectile(53, 518),
    /**
     * <code>DOTA_UM_TE_ProjectileLoc = 519;</code>
     */
    DOTA_UM_TE_ProjectileLoc(54, 519),
    /**
     * <code>DOTA_UM_TE_DotaBloodImpact = 520;</code>
     */
    DOTA_UM_TE_DotaBloodImpact(55, 520),
    /**
     * <code>DOTA_UM_TE_UnitAnimation = 521;</code>
     */
    DOTA_UM_TE_UnitAnimation(56, 521),
    /**
     * <code>DOTA_UM_TE_UnitAnimationEnd = 522;</code>
     */
    DOTA_UM_TE_UnitAnimationEnd(57, 522),
    /**
     * <code>DOTA_UM_AbilityPing = 523;</code>
     */
    DOTA_UM_AbilityPing(58, 523),
    /**
     * <code>DOTA_UM_ShowGenericPopup = 524;</code>
     */
    DOTA_UM_ShowGenericPopup(59, 524),
    /**
     * <code>DOTA_UM_VoteStart = 525;</code>
     */
    DOTA_UM_VoteStart(60, 525),
    /**
     * <code>DOTA_UM_VoteUpdate = 526;</code>
     */
    DOTA_UM_VoteUpdate(61, 526),
    /**
     * <code>DOTA_UM_VoteEnd = 527;</code>
     */
    DOTA_UM_VoteEnd(62, 527),
    /**
     * <code>DOTA_UM_BoosterState = 528;</code>
     */
    DOTA_UM_BoosterState(63, 528),
    /**
     * <code>DOTA_UM_WillPurchaseAlert = 529;</code>
     */
    DOTA_UM_WillPurchaseAlert(64, 529),
    /**
     * <code>DOTA_UM_TutorialMinimapPosition = 530;</code>
     */
    DOTA_UM_TutorialMinimapPosition(65, 530),
    /**
     * <code>DOTA_UM_PlayerMMR = 531;</code>
     */
    DOTA_UM_PlayerMMR(66, 531),
    /**
     * <code>DOTA_UM_AbilitySteal = 532;</code>
     */
    DOTA_UM_AbilitySteal(67, 532),
    /**
     * <code>DOTA_UM_CourierKilledAlert = 533;</code>
     */
    DOTA_UM_CourierKilledAlert(68, 533),
    /**
     * <code>DOTA_UM_EnemyItemAlert = 534;</code>
     */
    DOTA_UM_EnemyItemAlert(69, 534),
    /**
     * <code>DOTA_UM_StatsMatchDetails = 535;</code>
     */
    DOTA_UM_StatsMatchDetails(70, 535),
    /**
     * <code>DOTA_UM_MiniTaunt = 536;</code>
     */
    DOTA_UM_MiniTaunt(71, 536),
    /**
     * <code>DOTA_UM_BuyBackStateAlert = 537;</code>
     */
    DOTA_UM_BuyBackStateAlert(72, 537),
    /**
     * <code>DOTA_UM_SpeechBubble = 538;</code>
     */
    DOTA_UM_SpeechBubble(73, 538),
    /**
     * <code>DOTA_UM_CustomHeaderMessage = 539;</code>
     */
    DOTA_UM_CustomHeaderMessage(74, 539),
    /**
     * <code>DOTA_UM_QuickBuyAlert = 540;</code>
     */
    DOTA_UM_QuickBuyAlert(75, 540),
    /**
     * <code>DOTA_UM_StatsHeroDetails = 541;</code>
     */
    DOTA_UM_StatsHeroDetails(76, 541),
    /**
     * <code>DOTA_UM_PredictionResult = 542;</code>
     */
    DOTA_UM_PredictionResult(77, 542),
    /**
     * <code>DOTA_UM_ModifierAlert = 543;</code>
     */
    DOTA_UM_ModifierAlert(78, 543),
    /**
     * <code>DOTA_UM_HPManaAlert = 544;</code>
     */
    DOTA_UM_HPManaAlert(79, 544),
    /**
     * <code>DOTA_UM_GlyphAlert = 545;</code>
     */
    DOTA_UM_GlyphAlert(80, 545),
    /**
     * <code>DOTA_UM_BeastChat = 546;</code>
     */
    DOTA_UM_BeastChat(81, 546),
    /**
     * <code>DOTA_UM_SpectatorPlayerUnitOrders = 547;</code>
     */
    DOTA_UM_SpectatorPlayerUnitOrders(82, 547),
    /**
     * <code>DOTA_UM_CustomHudElement_Create = 548;</code>
     */
    DOTA_UM_CustomHudElement_Create(83, 548),
    /**
     * <code>DOTA_UM_CustomHudElement_Modify = 549;</code>
     */
    DOTA_UM_CustomHudElement_Modify(84, 549),
    /**
     * <code>DOTA_UM_CustomHudElement_Destroy = 550;</code>
     */
    DOTA_UM_CustomHudElement_Destroy(85, 550),
    /**
     * <code>DOTA_UM_CompendiumState = 551;</code>
     */
    DOTA_UM_CompendiumState(86, 551),
    /**
     * <code>DOTA_UM_ProjectionAbility = 552;</code>
     */
    DOTA_UM_ProjectionAbility(87, 552),
    /**
     * <code>DOTA_UM_ProjectionEvent = 553;</code>
     */
    DOTA_UM_ProjectionEvent(88, 553),
    /**
     * <code>DOTA_UM_CombatLogDataHLTV = 554;</code>
     */
    DOTA_UM_CombatLogDataHLTV(89, 554),
    /**
     * <code>DOTA_UM_XPAlert = 555;</code>
     */
    DOTA_UM_XPAlert(90, 555),
    /**
     * <code>DOTA_UM_UpdateQuestProgress = 556;</code>
     */
    DOTA_UM_UpdateQuestProgress(91, 556),
    /**
     * <code>DOTA_UM_MatchMetadata = 557;</code>
     */
    DOTA_UM_MatchMetadata(92, 557),
    /**
     * <code>DOTA_UM_MatchDetails = 558;</code>
     */
    DOTA_UM_MatchDetails(93, 558),
    /**
     * <code>DOTA_UM_QuestStatus = 559;</code>
     */
    DOTA_UM_QuestStatus(94, 559),
    /**
     * <code>DOTA_UM_SuggestHeroPick = 560;</code>
     */
    DOTA_UM_SuggestHeroPick(95, 560),
    /**
     * <code>DOTA_UM_SuggestHeroRole = 561;</code>
     */
    DOTA_UM_SuggestHeroRole(96, 561),
    /**
     * <code>DOTA_UM_KillcamDamageTaken = 562;</code>
     */
    DOTA_UM_KillcamDamageTaken(97, 562),
    /**
     * <code>DOTA_UM_SelectPenaltyGold = 563;</code>
     */
    DOTA_UM_SelectPenaltyGold(98, 563),
    /**
     * <code>DOTA_UM_RollDiceResult = 564;</code>
     */
    DOTA_UM_RollDiceResult(99, 564),
    /**
     * <code>DOTA_UM_FlipCoinResult = 565;</code>
     */
    DOTA_UM_FlipCoinResult(100, 565),
    /**
     * <code>DOTA_UM_RequestItemSuggestions = 566;</code>
     */
    DOTA_UM_RequestItemSuggestions(101, 566),
    /**
     * <code>DOTA_UM_TeamCaptainChanged = 567;</code>
     */
    DOTA_UM_TeamCaptainChanged(102, 567),
    /**
     * <code>DOTA_UM_SendRoshanSpectatorPhase = 568;</code>
     */
    DOTA_UM_SendRoshanSpectatorPhase(103, 568),
    /**
     * <code>DOTA_UM_ChatWheelCooldown = 569;</code>
     */
    DOTA_UM_ChatWheelCooldown(104, 569),
    /**
     * <code>DOTA_UM_DismissAllStatPopups = 570;</code>
     */
    DOTA_UM_DismissAllStatPopups(105, 570),
    /**
     * <code>DOTA_UM_TE_DestroyProjectile = 571;</code>
     */
    DOTA_UM_TE_DestroyProjectile(106, 571),
    /**
     * <code>DOTA_UM_HeroRelicProgress = 572;</code>
     */
    DOTA_UM_HeroRelicProgress(107, 572),
    /**
     * <code>DOTA_UM_AbilityDraftRequestAbility = 573;</code>
     */
    DOTA_UM_AbilityDraftRequestAbility(108, 573),
    /**
     * <code>DOTA_UM_ItemSold = 574;</code>
     */
    DOTA_UM_ItemSold(109, 574),
    /**
     * <code>DOTA_UM_DamageReport = 575;</code>
     */
    DOTA_UM_DamageReport(110, 575),
    /**
     * <code>DOTA_UM_SalutePlayer = 576;</code>
     */
    DOTA_UM_SalutePlayer(111, 576),
    /**
     * <code>DOTA_UM_TipAlert = 577;</code>
     */
    DOTA_UM_TipAlert(112, 577),
    /**
     * <code>DOTA_UM_ReplaceQueryUnit = 578;</code>
     */
    DOTA_UM_ReplaceQueryUnit(113, 578),
    /**
     * <code>DOTA_UM_EmptyTeleportAlert = 579;</code>
     */
    DOTA_UM_EmptyTeleportAlert(114, 579),
    /**
     * <code>DOTA_UM_MarsArenaOfBloodAttack = 580;</code>
     */
    DOTA_UM_MarsArenaOfBloodAttack(115, 580),
    /**
     * <code>DOTA_UM_ESArcanaCombo = 581;</code>
     */
    DOTA_UM_ESArcanaCombo(116, 581),
    /**
     * <code>DOTA_UM_ESArcanaComboSummary = 582;</code>
     */
    DOTA_UM_ESArcanaComboSummary(117, 582),
    /**
     * <code>DOTA_UM_HighFiveLeftHanging = 583;</code>
     */
    DOTA_UM_HighFiveLeftHanging(118, 583),
    /**
     * <code>DOTA_UM_HighFiveCompleted = 584;</code>
     */
    DOTA_UM_HighFiveCompleted(119, 584),
    /**
     * <code>DOTA_UM_ShovelUnearth = 585;</code>
     */
    DOTA_UM_ShovelUnearth(120, 585),
    /**
     * <code>DOTA_EM_InvokerSpellCast = 586;</code>
     */
    DOTA_EM_InvokerSpellCast(121, 586),
    /**
     * <code>DOTA_UM_RadarAlert = 587;</code>
     */
    DOTA_UM_RadarAlert(122, 587),
    /**
     * <code>DOTA_UM_AllStarEvent = 588;</code>
     */
    DOTA_UM_AllStarEvent(123, 588),
    /**
     * <code>DOTA_UM_TalentTreeAlert = 589;</code>
     */
    DOTA_UM_TalentTreeAlert(124, 589),
    /**
     * <code>DOTA_UM_QueuedOrderRemoved = 590;</code>
     */
    DOTA_UM_QueuedOrderRemoved(125, 590),
    /**
     * <code>DOTA_UM_DebugChallenge = 591;</code>
     */
    DOTA_UM_DebugChallenge(126, 591),
    /**
     * <code>DOTA_UM_OMArcanaCombo = 592;</code>
     */
    DOTA_UM_OMArcanaCombo(127, 592),
    /**
     * <code>DOTA_UM_FoundNeutralItem = 593;</code>
     */
    DOTA_UM_FoundNeutralItem(128, 593),
    /**
     * <code>DOTA_UM_OutpostCaptured = 594;</code>
     */
    DOTA_UM_OutpostCaptured(129, 594),
    /**
     * <code>DOTA_UM_OutpostGrantedXP = 595;</code>
     */
    DOTA_UM_OutpostGrantedXP(130, 595),
    /**
     * <code>DOTA_UM_MoveCameraToUnit = 596;</code>
     */
    DOTA_UM_MoveCameraToUnit(131, 596),
    /**
     * <code>DOTA_UM_PauseMinigameData = 597;</code>
     */
    DOTA_UM_PauseMinigameData(132, 597),
    /**
     * <code>DOTA_UM_VersusScene_PlayerBehavior = 598;</code>
     */
    DOTA_UM_VersusScene_PlayerBehavior(133, 598),
    /**
     * <code>DOTA_UM_QoP_ArcanaSummary = 600;</code>
     */
    DOTA_UM_QoP_ArcanaSummary(134, 600),
    /**
     * <code>DOTA_UM_HotPotato_Created = 601;</code>
     */
    DOTA_UM_HotPotato_Created(135, 601),
    /**
     * <code>DOTA_UM_HotPotato_Exploded = 602;</code>
     */
    DOTA_UM_HotPotato_Exploded(136, 602),
    /**
     * <code>DOTA_UM_WK_Arcana_Progress = 603;</code>
     */
    DOTA_UM_WK_Arcana_Progress(137, 603),
    /**
     * <code>DOTA_UM_GuildChallenge_Progress = 604;</code>
     */
    DOTA_UM_GuildChallenge_Progress(138, 604),
    /**
     * <code>DOTA_UM_WRArcanaProgress = 605;</code>
     */
    DOTA_UM_WRArcanaProgress(139, 605),
    /**
     * <code>DOTA_UM_WRArcanaSummary = 606;</code>
     */
    DOTA_UM_WRArcanaSummary(140, 606),
    /**
     * <code>DOTA_UM_EmptyItemSlotAlert = 607;</code>
     */
    DOTA_UM_EmptyItemSlotAlert(141, 607),
    /**
     * <code>DOTA_UM_AghsStatusAlert = 608;</code>
     */
    DOTA_UM_AghsStatusAlert(142, 608),
    /**
     * <code>DOTA_UM_PingConfirmation = 609;</code>
     */
    DOTA_UM_PingConfirmation(143, 609),
    /**
     * <code>DOTA_UM_MutedPlayers = 610;</code>
     */
    DOTA_UM_MutedPlayers(144, 610),
    /**
     * <code>DOTA_UM_ContextualTip = 611;</code>
     */
    DOTA_UM_ContextualTip(145, 611),
    /**
     * <code>DOTA_UM_ChatMessage = 612;</code>
     */
    DOTA_UM_ChatMessage(146, 612),
    /**
     * <code>DOTA_UM_NeutralCampAlert = 613;</code>
     */
    DOTA_UM_NeutralCampAlert(147, 613),
    /**
     * <code>DOTA_UM_RockPaperScissorsStarted = 614;</code>
     */
    DOTA_UM_RockPaperScissorsStarted(148, 614),
    /**
     * <code>DOTA_UM_RockPaperScissorsFinished = 615;</code>
     */
    DOTA_UM_RockPaperScissorsFinished(149, 615),
    /**
     * <code>DOTA_UM_DuelOpponentKilled = 616;</code>
     */
    DOTA_UM_DuelOpponentKilled(150, 616),
    /**
     * <code>DOTA_UM_DuelAccepted = 617;</code>
     */
    DOTA_UM_DuelAccepted(151, 617),
    /**
     * <code>DOTA_UM_DuelRequested = 618;</code>
     */
    DOTA_UM_DuelRequested(152, 618),
    /**
     * <code>DOTA_UM_MuertaReleaseEvent_AssignedTargetKilled = 619;</code>
     */
    DOTA_UM_MuertaReleaseEvent_AssignedTargetKilled(153, 619),
    /**
     * <code>DOTA_UM_PlayerDraftSuggestPick = 620;</code>
     */
    DOTA_UM_PlayerDraftSuggestPick(154, 620),
    /**
     * <code>DOTA_UM_PlayerDraftPick = 621;</code>
     */
    DOTA_UM_PlayerDraftPick(155, 621),
    /**
     * <code>DOTA_UM_UpdateLinearProjectileCPData = 622;</code>
     */
    DOTA_UM_UpdateLinearProjectileCPData(156, 622),
    /**
     * <code>DOTA_UM_GiftPlayer = 623;</code>
     */
    DOTA_UM_GiftPlayer(157, 623),
    /**
     * <code>DOTA_UM_FacetPing = 624;</code>
     */
    DOTA_UM_FacetPing(158, 624),
    /**
     * <code>DOTA_UM_InnatePing = 625;</code>
     */
    DOTA_UM_InnatePing(159, 625),
    /**
     * <code>DOTA_UM_RoshanTimer = 626;</code>
     */
    DOTA_UM_RoshanTimer(160, 626),
    ;

    /**
     * <code>DOTA_UM_AddUnitToSelection = 464;</code>
     */
    public static final int DOTA_UM_AddUnitToSelection_VALUE = 464;
    /**
     * <code>DOTA_UM_AIDebugLine = 465;</code>
     */
    public static final int DOTA_UM_AIDebugLine_VALUE = 465;
    /**
     * <code>DOTA_UM_ChatEvent = 466;</code>
     */
    public static final int DOTA_UM_ChatEvent_VALUE = 466;
    /**
     * <code>DOTA_UM_CombatHeroPositions = 467;</code>
     */
    public static final int DOTA_UM_CombatHeroPositions_VALUE = 467;
    /**
     * <code>DOTA_UM_CombatLogData = 468;</code>
     */
    public static final int DOTA_UM_CombatLogData_VALUE = 468;
    /**
     * <code>DOTA_UM_CombatLogBulkData = 470;</code>
     */
    public static final int DOTA_UM_CombatLogBulkData_VALUE = 470;
    /**
     * <code>DOTA_UM_CreateLinearProjectile = 471;</code>
     */
    public static final int DOTA_UM_CreateLinearProjectile_VALUE = 471;
    /**
     * <code>DOTA_UM_DestroyLinearProjectile = 472;</code>
     */
    public static final int DOTA_UM_DestroyLinearProjectile_VALUE = 472;
    /**
     * <code>DOTA_UM_DodgeTrackingProjectiles = 473;</code>
     */
    public static final int DOTA_UM_DodgeTrackingProjectiles_VALUE = 473;
    /**
     * <code>DOTA_UM_GlobalLightColor = 474;</code>
     */
    public static final int DOTA_UM_GlobalLightColor_VALUE = 474;
    /**
     * <code>DOTA_UM_GlobalLightDirection = 475;</code>
     */
    public static final int DOTA_UM_GlobalLightDirection_VALUE = 475;
    /**
     * <code>DOTA_UM_InvalidCommand = 476;</code>
     */
    public static final int DOTA_UM_InvalidCommand_VALUE = 476;
    /**
     * <code>DOTA_UM_LocationPing = 477;</code>
     */
    public static final int DOTA_UM_LocationPing_VALUE = 477;
    /**
     * <code>DOTA_UM_MapLine = 478;</code>
     */
    public static final int DOTA_UM_MapLine_VALUE = 478;
    /**
     * <code>DOTA_UM_MiniKillCamInfo = 479;</code>
     */
    public static final int DOTA_UM_MiniKillCamInfo_VALUE = 479;
    /**
     * <code>DOTA_UM_MinimapDebugPoint = 480;</code>
     */
    public static final int DOTA_UM_MinimapDebugPoint_VALUE = 480;
    /**
     * <code>DOTA_UM_MinimapEvent = 481;</code>
     */
    public static final int DOTA_UM_MinimapEvent_VALUE = 481;
    /**
     * <code>DOTA_UM_NevermoreRequiem = 482;</code>
     */
    public static final int DOTA_UM_NevermoreRequiem_VALUE = 482;
    /**
     * <code>DOTA_UM_OverheadEvent = 483;</code>
     */
    public static final int DOTA_UM_OverheadEvent_VALUE = 483;
    /**
     * <code>DOTA_UM_SetNextAutobuyItem = 484;</code>
     */
    public static final int DOTA_UM_SetNextAutobuyItem_VALUE = 484;
    /**
     * <code>DOTA_UM_SharedCooldown = 485;</code>
     */
    public static final int DOTA_UM_SharedCooldown_VALUE = 485;
    /**
     * <code>DOTA_UM_SpectatorPlayerClick = 486;</code>
     */
    public static final int DOTA_UM_SpectatorPlayerClick_VALUE = 486;
    /**
     * <code>DOTA_UM_TutorialTipInfo = 487;</code>
     */
    public static final int DOTA_UM_TutorialTipInfo_VALUE = 487;
    /**
     * <code>DOTA_UM_UnitEvent = 488;</code>
     */
    public static final int DOTA_UM_UnitEvent_VALUE = 488;
    /**
     * <code>DOTA_UM_ParticleManager = 489;</code>
     */
    public static final int DOTA_UM_ParticleManager_VALUE = 489;
    /**
     * <code>DOTA_UM_BotChat = 490;</code>
     */
    public static final int DOTA_UM_BotChat_VALUE = 490;
    /**
     * <code>DOTA_UM_HudError = 491;</code>
     */
    public static final int DOTA_UM_HudError_VALUE = 491;
    /**
     * <code>DOTA_UM_ItemPurchased = 492;</code>
     */
    public static final int DOTA_UM_ItemPurchased_VALUE = 492;
    /**
     * <code>DOTA_UM_Ping = 493;</code>
     */
    public static final int DOTA_UM_Ping_VALUE = 493;
    /**
     * <code>DOTA_UM_ItemFound = 494;</code>
     */
    public static final int DOTA_UM_ItemFound_VALUE = 494;
    /**
     * <code>DOTA_UM_CharacterSpeakConcept = 495;</code>
     */
    public static final int DOTA_UM_CharacterSpeakConcept_VALUE = 495;
    /**
     * <code>DOTA_UM_SwapVerify = 496;</code>
     */
    public static final int DOTA_UM_SwapVerify_VALUE = 496;
    /**
     * <code>DOTA_UM_WorldLine = 497;</code>
     */
    public static final int DOTA_UM_WorldLine_VALUE = 497;
    /**
     * <code>DOTA_UM_TournamentDrop = 498;</code>
     */
    public static final int DOTA_UM_TournamentDrop_VALUE = 498;
    /**
     * <code>DOTA_UM_ItemAlert = 499;</code>
     */
    public static final int DOTA_UM_ItemAlert_VALUE = 499;
    /**
     * <code>DOTA_UM_HalloweenDrops = 500;</code>
     */
    public static final int DOTA_UM_HalloweenDrops_VALUE = 500;
    /**
     * <code>DOTA_UM_ChatWheel = 501;</code>
     */
    public static final int DOTA_UM_ChatWheel_VALUE = 501;
    /**
     * <code>DOTA_UM_ReceivedXmasGift = 502;</code>
     */
    public static final int DOTA_UM_ReceivedXmasGift_VALUE = 502;
    /**
     * <code>DOTA_UM_UpdateSharedContent = 503;</code>
     */
    public static final int DOTA_UM_UpdateSharedContent_VALUE = 503;
    /**
     * <code>DOTA_UM_TutorialRequestExp = 504;</code>
     */
    public static final int DOTA_UM_TutorialRequestExp_VALUE = 504;
    /**
     * <code>DOTA_UM_TutorialPingMinimap = 505;</code>
     */
    public static final int DOTA_UM_TutorialPingMinimap_VALUE = 505;
    /**
     * <code>DOTA_UM_GamerulesStateChanged = 506;</code>
     */
    public static final int DOTA_UM_GamerulesStateChanged_VALUE = 506;
    /**
     * <code>DOTA_UM_ShowSurvey = 507;</code>
     */
    public static final int DOTA_UM_ShowSurvey_VALUE = 507;
    /**
     * <code>DOTA_UM_TutorialFade = 508;</code>
     */
    public static final int DOTA_UM_TutorialFade_VALUE = 508;
    /**
     * <code>DOTA_UM_AddQuestLogEntry = 509;</code>
     */
    public static final int DOTA_UM_AddQuestLogEntry_VALUE = 509;
    /**
     * <code>DOTA_UM_SendStatPopup = 510;</code>
     */
    public static final int DOTA_UM_SendStatPopup_VALUE = 510;
    /**
     * <code>DOTA_UM_TutorialFinish = 511;</code>
     */
    public static final int DOTA_UM_TutorialFinish_VALUE = 511;
    /**
     * <code>DOTA_UM_SendRoshanPopup = 512;</code>
     */
    public static final int DOTA_UM_SendRoshanPopup_VALUE = 512;
    /**
     * <code>DOTA_UM_SendGenericToolTip = 513;</code>
     */
    public static final int DOTA_UM_SendGenericToolTip_VALUE = 513;
    /**
     * <code>DOTA_UM_SendFinalGold = 514;</code>
     */
    public static final int DOTA_UM_SendFinalGold_VALUE = 514;
    /**
     * <code>DOTA_UM_CustomMsg = 515;</code>
     */
    public static final int DOTA_UM_CustomMsg_VALUE = 515;
    /**
     * <code>DOTA_UM_CoachHUDPing = 516;</code>
     */
    public static final int DOTA_UM_CoachHUDPing_VALUE = 516;
    /**
     * <code>DOTA_UM_ClientLoadGridNav = 517;</code>
     */
    public static final int DOTA_UM_ClientLoadGridNav_VALUE = 517;
    /**
     * <code>DOTA_UM_TE_Projectile = 518;</code>
     */
    public static final int DOTA_UM_TE_Projectile_VALUE = 518;
    /**
     * <code>DOTA_UM_TE_ProjectileLoc = 519;</code>
     */
    public static final int DOTA_UM_TE_ProjectileLoc_VALUE = 519;
    /**
     * <code>DOTA_UM_TE_DotaBloodImpact = 520;</code>
     */
    public static final int DOTA_UM_TE_DotaBloodImpact_VALUE = 520;
    /**
     * <code>DOTA_UM_TE_UnitAnimation = 521;</code>
     */
    public static final int DOTA_UM_TE_UnitAnimation_VALUE = 521;
    /**
     * <code>DOTA_UM_TE_UnitAnimationEnd = 522;</code>
     */
    public static final int DOTA_UM_TE_UnitAnimationEnd_VALUE = 522;
    /**
     * <code>DOTA_UM_AbilityPing = 523;</code>
     */
    public static final int DOTA_UM_AbilityPing_VALUE = 523;
    /**
     * <code>DOTA_UM_ShowGenericPopup = 524;</code>
     */
    public static final int DOTA_UM_ShowGenericPopup_VALUE = 524;
    /**
     * <code>DOTA_UM_VoteStart = 525;</code>
     */
    public static final int DOTA_UM_VoteStart_VALUE = 525;
    /**
     * <code>DOTA_UM_VoteUpdate = 526;</code>
     */
    public static final int DOTA_UM_VoteUpdate_VALUE = 526;
    /**
     * <code>DOTA_UM_VoteEnd = 527;</code>
     */
    public static final int DOTA_UM_VoteEnd_VALUE = 527;
    /**
     * <code>DOTA_UM_BoosterState = 528;</code>
     */
    public static final int DOTA_UM_BoosterState_VALUE = 528;
    /**
     * <code>DOTA_UM_WillPurchaseAlert = 529;</code>
     */
    public static final int DOTA_UM_WillPurchaseAlert_VALUE = 529;
    /**
     * <code>DOTA_UM_TutorialMinimapPosition = 530;</code>
     */
    public static final int DOTA_UM_TutorialMinimapPosition_VALUE = 530;
    /**
     * <code>DOTA_UM_PlayerMMR = 531;</code>
     */
    public static final int DOTA_UM_PlayerMMR_VALUE = 531;
    /**
     * <code>DOTA_UM_AbilitySteal = 532;</code>
     */
    public static final int DOTA_UM_AbilitySteal_VALUE = 532;
    /**
     * <code>DOTA_UM_CourierKilledAlert = 533;</code>
     */
    public static final int DOTA_UM_CourierKilledAlert_VALUE = 533;
    /**
     * <code>DOTA_UM_EnemyItemAlert = 534;</code>
     */
    public static final int DOTA_UM_EnemyItemAlert_VALUE = 534;
    /**
     * <code>DOTA_UM_StatsMatchDetails = 535;</code>
     */
    public static final int DOTA_UM_StatsMatchDetails_VALUE = 535;
    /**
     * <code>DOTA_UM_MiniTaunt = 536;</code>
     */
    public static final int DOTA_UM_MiniTaunt_VALUE = 536;
    /**
     * <code>DOTA_UM_BuyBackStateAlert = 537;</code>
     */
    public static final int DOTA_UM_BuyBackStateAlert_VALUE = 537;
    /**
     * <code>DOTA_UM_SpeechBubble = 538;</code>
     */
    public static final int DOTA_UM_SpeechBubble_VALUE = 538;
    /**
     * <code>DOTA_UM_CustomHeaderMessage = 539;</code>
     */
    public static final int DOTA_UM_CustomHeaderMessage_VALUE = 539;
    /**
     * <code>DOTA_UM_QuickBuyAlert = 540;</code>
     */
    public static final int DOTA_UM_QuickBuyAlert_VALUE = 540;
    /**
     * <code>DOTA_UM_StatsHeroDetails = 541;</code>
     */
    public static final int DOTA_UM_StatsHeroDetails_VALUE = 541;
    /**
     * <code>DOTA_UM_PredictionResult = 542;</code>
     */
    public static final int DOTA_UM_PredictionResult_VALUE = 542;
    /**
     * <code>DOTA_UM_ModifierAlert = 543;</code>
     */
    public static final int DOTA_UM_ModifierAlert_VALUE = 543;
    /**
     * <code>DOTA_UM_HPManaAlert = 544;</code>
     */
    public static final int DOTA_UM_HPManaAlert_VALUE = 544;
    /**
     * <code>DOTA_UM_GlyphAlert = 545;</code>
     */
    public static final int DOTA_UM_GlyphAlert_VALUE = 545;
    /**
     * <code>DOTA_UM_BeastChat = 546;</code>
     */
    public static final int DOTA_UM_BeastChat_VALUE = 546;
    /**
     * <code>DOTA_UM_SpectatorPlayerUnitOrders = 547;</code>
     */
    public static final int DOTA_UM_SpectatorPlayerUnitOrders_VALUE = 547;
    /**
     * <code>DOTA_UM_CustomHudElement_Create = 548;</code>
     */
    public static final int DOTA_UM_CustomHudElement_Create_VALUE = 548;
    /**
     * <code>DOTA_UM_CustomHudElement_Modify = 549;</code>
     */
    public static final int DOTA_UM_CustomHudElement_Modify_VALUE = 549;
    /**
     * <code>DOTA_UM_CustomHudElement_Destroy = 550;</code>
     */
    public static final int DOTA_UM_CustomHudElement_Destroy_VALUE = 550;
    /**
     * <code>DOTA_UM_CompendiumState = 551;</code>
     */
    public static final int DOTA_UM_CompendiumState_VALUE = 551;
    /**
     * <code>DOTA_UM_ProjectionAbility = 552;</code>
     */
    public static final int DOTA_UM_ProjectionAbility_VALUE = 552;
    /**
     * <code>DOTA_UM_ProjectionEvent = 553;</code>
     */
    public static final int DOTA_UM_ProjectionEvent_VALUE = 553;
    /**
     * <code>DOTA_UM_CombatLogDataHLTV = 554;</code>
     */
    public static final int DOTA_UM_CombatLogDataHLTV_VALUE = 554;
    /**
     * <code>DOTA_UM_XPAlert = 555;</code>
     */
    public static final int DOTA_UM_XPAlert_VALUE = 555;
    /**
     * <code>DOTA_UM_UpdateQuestProgress = 556;</code>
     */
    public static final int DOTA_UM_UpdateQuestProgress_VALUE = 556;
    /**
     * <code>DOTA_UM_MatchMetadata = 557;</code>
     */
    public static final int DOTA_UM_MatchMetadata_VALUE = 557;
    /**
     * <code>DOTA_UM_MatchDetails = 558;</code>
     */
    public static final int DOTA_UM_MatchDetails_VALUE = 558;
    /**
     * <code>DOTA_UM_QuestStatus = 559;</code>
     */
    public static final int DOTA_UM_QuestStatus_VALUE = 559;
    /**
     * <code>DOTA_UM_SuggestHeroPick = 560;</code>
     */
    public static final int DOTA_UM_SuggestHeroPick_VALUE = 560;
    /**
     * <code>DOTA_UM_SuggestHeroRole = 561;</code>
     */
    public static final int DOTA_UM_SuggestHeroRole_VALUE = 561;
    /**
     * <code>DOTA_UM_KillcamDamageTaken = 562;</code>
     */
    public static final int DOTA_UM_KillcamDamageTaken_VALUE = 562;
    /**
     * <code>DOTA_UM_SelectPenaltyGold = 563;</code>
     */
    public static final int DOTA_UM_SelectPenaltyGold_VALUE = 563;
    /**
     * <code>DOTA_UM_RollDiceResult = 564;</code>
     */
    public static final int DOTA_UM_RollDiceResult_VALUE = 564;
    /**
     * <code>DOTA_UM_FlipCoinResult = 565;</code>
     */
    public static final int DOTA_UM_FlipCoinResult_VALUE = 565;
    /**
     * <code>DOTA_UM_RequestItemSuggestions = 566;</code>
     */
    public static final int DOTA_UM_RequestItemSuggestions_VALUE = 566;
    /**
     * <code>DOTA_UM_TeamCaptainChanged = 567;</code>
     */
    public static final int DOTA_UM_TeamCaptainChanged_VALUE = 567;
    /**
     * <code>DOTA_UM_SendRoshanSpectatorPhase = 568;</code>
     */
    public static final int DOTA_UM_SendRoshanSpectatorPhase_VALUE = 568;
    /**
     * <code>DOTA_UM_ChatWheelCooldown = 569;</code>
     */
    public static final int DOTA_UM_ChatWheelCooldown_VALUE = 569;
    /**
     * <code>DOTA_UM_DismissAllStatPopups = 570;</code>
     */
    public static final int DOTA_UM_DismissAllStatPopups_VALUE = 570;
    /**
     * <code>DOTA_UM_TE_DestroyProjectile = 571;</code>
     */
    public static final int DOTA_UM_TE_DestroyProjectile_VALUE = 571;
    /**
     * <code>DOTA_UM_HeroRelicProgress = 572;</code>
     */
    public static final int DOTA_UM_HeroRelicProgress_VALUE = 572;
    /**
     * <code>DOTA_UM_AbilityDraftRequestAbility = 573;</code>
     */
    public static final int DOTA_UM_AbilityDraftRequestAbility_VALUE = 573;
    /**
     * <code>DOTA_UM_ItemSold = 574;</code>
     */
    public static final int DOTA_UM_ItemSold_VALUE = 574;
    /**
     * <code>DOTA_UM_DamageReport = 575;</code>
     */
    public static final int DOTA_UM_DamageReport_VALUE = 575;
    /**
     * <code>DOTA_UM_SalutePlayer = 576;</code>
     */
    public static final int DOTA_UM_SalutePlayer_VALUE = 576;
    /**
     * <code>DOTA_UM_TipAlert = 577;</code>
     */
    public static final int DOTA_UM_TipAlert_VALUE = 577;
    /**
     * <code>DOTA_UM_ReplaceQueryUnit = 578;</code>
     */
    public static final int DOTA_UM_ReplaceQueryUnit_VALUE = 578;
    /**
     * <code>DOTA_UM_EmptyTeleportAlert = 579;</code>
     */
    public static final int DOTA_UM_EmptyTeleportAlert_VALUE = 579;
    /**
     * <code>DOTA_UM_MarsArenaOfBloodAttack = 580;</code>
     */
    public static final int DOTA_UM_MarsArenaOfBloodAttack_VALUE = 580;
    /**
     * <code>DOTA_UM_ESArcanaCombo = 581;</code>
     */
    public static final int DOTA_UM_ESArcanaCombo_VALUE = 581;
    /**
     * <code>DOTA_UM_ESArcanaComboSummary = 582;</code>
     */
    public static final int DOTA_UM_ESArcanaComboSummary_VALUE = 582;
    /**
     * <code>DOTA_UM_HighFiveLeftHanging = 583;</code>
     */
    public static final int DOTA_UM_HighFiveLeftHanging_VALUE = 583;
    /**
     * <code>DOTA_UM_HighFiveCompleted = 584;</code>
     */
    public static final int DOTA_UM_HighFiveCompleted_VALUE = 584;
    /**
     * <code>DOTA_UM_ShovelUnearth = 585;</code>
     */
    public static final int DOTA_UM_ShovelUnearth_VALUE = 585;
    /**
     * <code>DOTA_EM_InvokerSpellCast = 586;</code>
     */
    public static final int DOTA_EM_InvokerSpellCast_VALUE = 586;
    /**
     * <code>DOTA_UM_RadarAlert = 587;</code>
     */
    public static final int DOTA_UM_RadarAlert_VALUE = 587;
    /**
     * <code>DOTA_UM_AllStarEvent = 588;</code>
     */
    public static final int DOTA_UM_AllStarEvent_VALUE = 588;
    /**
     * <code>DOTA_UM_TalentTreeAlert = 589;</code>
     */
    public static final int DOTA_UM_TalentTreeAlert_VALUE = 589;
    /**
     * <code>DOTA_UM_QueuedOrderRemoved = 590;</code>
     */
    public static final int DOTA_UM_QueuedOrderRemoved_VALUE = 590;
    /**
     * <code>DOTA_UM_DebugChallenge = 591;</code>
     */
    public static final int DOTA_UM_DebugChallenge_VALUE = 591;
    /**
     * <code>DOTA_UM_OMArcanaCombo = 592;</code>
     */
    public static final int DOTA_UM_OMArcanaCombo_VALUE = 592;
    /**
     * <code>DOTA_UM_FoundNeutralItem = 593;</code>
     */
    public static final int DOTA_UM_FoundNeutralItem_VALUE = 593;
    /**
     * <code>DOTA_UM_OutpostCaptured = 594;</code>
     */
    public static final int DOTA_UM_OutpostCaptured_VALUE = 594;
    /**
     * <code>DOTA_UM_OutpostGrantedXP = 595;</code>
     */
    public static final int DOTA_UM_OutpostGrantedXP_VALUE = 595;
    /**
     * <code>DOTA_UM_MoveCameraToUnit = 596;</code>
     */
    public static final int DOTA_UM_MoveCameraToUnit_VALUE = 596;
    /**
     * <code>DOTA_UM_PauseMinigameData = 597;</code>
     */
    public static final int DOTA_UM_PauseMinigameData_VALUE = 597;
    /**
     * <code>DOTA_UM_VersusScene_PlayerBehavior = 598;</code>
     */
    public static final int DOTA_UM_VersusScene_PlayerBehavior_VALUE = 598;
    /**
     * <code>DOTA_UM_QoP_ArcanaSummary = 600;</code>
     */
    public static final int DOTA_UM_QoP_ArcanaSummary_VALUE = 600;
    /**
     * <code>DOTA_UM_HotPotato_Created = 601;</code>
     */
    public static final int DOTA_UM_HotPotato_Created_VALUE = 601;
    /**
     * <code>DOTA_UM_HotPotato_Exploded = 602;</code>
     */
    public static final int DOTA_UM_HotPotato_Exploded_VALUE = 602;
    /**
     * <code>DOTA_UM_WK_Arcana_Progress = 603;</code>
     */
    public static final int DOTA_UM_WK_Arcana_Progress_VALUE = 603;
    /**
     * <code>DOTA_UM_GuildChallenge_Progress = 604;</code>
     */
    public static final int DOTA_UM_GuildChallenge_Progress_VALUE = 604;
    /**
     * <code>DOTA_UM_WRArcanaProgress = 605;</code>
     */
    public static final int DOTA_UM_WRArcanaProgress_VALUE = 605;
    /**
     * <code>DOTA_UM_WRArcanaSummary = 606;</code>
     */
    public static final int DOTA_UM_WRArcanaSummary_VALUE = 606;
    /**
     * <code>DOTA_UM_EmptyItemSlotAlert = 607;</code>
     */
    public static final int DOTA_UM_EmptyItemSlotAlert_VALUE = 607;
    /**
     * <code>DOTA_UM_AghsStatusAlert = 608;</code>
     */
    public static final int DOTA_UM_AghsStatusAlert_VALUE = 608;
    /**
     * <code>DOTA_UM_PingConfirmation = 609;</code>
     */
    public static final int DOTA_UM_PingConfirmation_VALUE = 609;
    /**
     * <code>DOTA_UM_MutedPlayers = 610;</code>
     */
    public static final int DOTA_UM_MutedPlayers_VALUE = 610;
    /**
     * <code>DOTA_UM_ContextualTip = 611;</code>
     */
    public static final int DOTA_UM_ContextualTip_VALUE = 611;
    /**
     * <code>DOTA_UM_ChatMessage = 612;</code>
     */
    public static final int DOTA_UM_ChatMessage_VALUE = 612;
    /**
     * <code>DOTA_UM_NeutralCampAlert = 613;</code>
     */
    public static final int DOTA_UM_NeutralCampAlert_VALUE = 613;
    /**
     * <code>DOTA_UM_RockPaperScissorsStarted = 614;</code>
     */
    public static final int DOTA_UM_RockPaperScissorsStarted_VALUE = 614;
    /**
     * <code>DOTA_UM_RockPaperScissorsFinished = 615;</code>
     */
    public static final int DOTA_UM_RockPaperScissorsFinished_VALUE = 615;
    /**
     * <code>DOTA_UM_DuelOpponentKilled = 616;</code>
     */
    public static final int DOTA_UM_DuelOpponentKilled_VALUE = 616;
    /**
     * <code>DOTA_UM_DuelAccepted = 617;</code>
     */
    public static final int DOTA_UM_DuelAccepted_VALUE = 617;
    /**
     * <code>DOTA_UM_DuelRequested = 618;</code>
     */
    public static final int DOTA_UM_DuelRequested_VALUE = 618;
    /**
     * <code>DOTA_UM_MuertaReleaseEvent_AssignedTargetKilled = 619;</code>
     */
    public static final int DOTA_UM_MuertaReleaseEvent_AssignedTargetKilled_VALUE = 619;
    /**
     * <code>DOTA_UM_PlayerDraftSuggestPick = 620;</code>
     */
    public static final int DOTA_UM_PlayerDraftSuggestPick_VALUE = 620;
    /**
     * <code>DOTA_UM_PlayerDraftPick = 621;</code>
     */
    public static final int DOTA_UM_PlayerDraftPick_VALUE = 621;
    /**
     * <code>DOTA_UM_UpdateLinearProjectileCPData = 622;</code>
     */
    public static final int DOTA_UM_UpdateLinearProjectileCPData_VALUE = 622;
    /**
     * <code>DOTA_UM_GiftPlayer = 623;</code>
     */
    public static final int DOTA_UM_GiftPlayer_VALUE = 623;
    /**
     * <code>DOTA_UM_FacetPing = 624;</code>
     */
    public static final int DOTA_UM_FacetPing_VALUE = 624;
    /**
     * <code>DOTA_UM_InnatePing = 625;</code>
     */
    public static final int DOTA_UM_InnatePing_VALUE = 625;
    /**
     * <code>DOTA_UM_RoshanTimer = 626;</code>
     */
    public static final int DOTA_UM_RoshanTimer_VALUE = 626;


    public final int getNumber() { return value; }

    public static EDotaUserMessages valueOf(int value) {
      switch (value) {
        case 464: return DOTA_UM_AddUnitToSelection;
        case 465: return DOTA_UM_AIDebugLine;
        case 466: return DOTA_UM_ChatEvent;
        case 467: return DOTA_UM_CombatHeroPositions;
        case 468: return DOTA_UM_CombatLogData;
        case 470: return DOTA_UM_CombatLogBulkData;
        case 471: return DOTA_UM_CreateLinearProjectile;
        case 472: return DOTA_UM_DestroyLinearProjectile;
        case 473: return DOTA_UM_DodgeTrackingProjectiles;
        case 474: return DOTA_UM_GlobalLightColor;
        case 475: return DOTA_UM_GlobalLightDirection;
        case 476: return DOTA_UM_InvalidCommand;
        case 477: return DOTA_UM_LocationPing;
        case 478: return DOTA_UM_MapLine;
        case 479: return DOTA_UM_MiniKillCamInfo;
        case 480: return DOTA_UM_MinimapDebugPoint;
        case 481: return DOTA_UM_MinimapEvent;
        case 482: return DOTA_UM_NevermoreRequiem;
        case 483: return DOTA_UM_OverheadEvent;
        case 484: return DOTA_UM_SetNextAutobuyItem;
        case 485: return DOTA_UM_SharedCooldown;
        case 486: return DOTA_UM_SpectatorPlayerClick;
        case 487: return DOTA_UM_TutorialTipInfo;
        case 488: return DOTA_UM_UnitEvent;
        case 489: return DOTA_UM_ParticleManager;
        case 490: return DOTA_UM_BotChat;
        case 491: return DOTA_UM_HudError;
        case 492: return DOTA_UM_ItemPurchased;
        case 493: return DOTA_UM_Ping;
        case 494: return DOTA_UM_ItemFound;
        case 495: return DOTA_UM_CharacterSpeakConcept;
        case 496: return DOTA_UM_SwapVerify;
        case 497: return DOTA_UM_WorldLine;
        case 498: return DOTA_UM_TournamentDrop;
        case 499: return DOTA_UM_ItemAlert;
        case 500: return DOTA_UM_HalloweenDrops;
        case 501: return DOTA_UM_ChatWheel;
        case 502: return DOTA_UM_ReceivedXmasGift;
        case 503: return DOTA_UM_UpdateSharedContent;
        case 504: return DOTA_UM_TutorialRequestExp;
        case 505: return DOTA_UM_TutorialPingMinimap;
        case 506: return DOTA_UM_GamerulesStateChanged;
        case 507: return DOTA_UM_ShowSurvey;
        case 508: return DOTA_UM_TutorialFade;
        case 509: return DOTA_UM_AddQuestLogEntry;
        case 510: return DOTA_UM_SendStatPopup;
        case 511: return DOTA_UM_TutorialFinish;
        case 512: return DOTA_UM_SendRoshanPopup;
        case 513: return DOTA_UM_SendGenericToolTip;
        case 514: return DOTA_UM_SendFinalGold;
        case 515: return DOTA_UM_CustomMsg;
        case 516: return DOTA_UM_CoachHUDPing;
        case 517: return DOTA_UM_ClientLoadGridNav;
        case 518: return DOTA_UM_TE_Projectile;
        case 519: return DOTA_UM_TE_ProjectileLoc;
        case 520: return DOTA_UM_TE_DotaBloodImpact;
        case 521: return DOTA_UM_TE_UnitAnimation;
        case 522: return DOTA_UM_TE_UnitAnimationEnd;
        case 523: return DOTA_UM_AbilityPing;
        case 524: return DOTA_UM_ShowGenericPopup;
        case 525: return DOTA_UM_VoteStart;
        case 526: return DOTA_UM_VoteUpdate;
        case 527: return DOTA_UM_VoteEnd;
        case 528: return DOTA_UM_BoosterState;
        case 529: return DOTA_UM_WillPurchaseAlert;
        case 530: return DOTA_UM_TutorialMinimapPosition;
        case 531: return DOTA_UM_PlayerMMR;
        case 532: return DOTA_UM_AbilitySteal;
        case 533: return DOTA_UM_CourierKilledAlert;
        case 534: return DOTA_UM_EnemyItemAlert;
        case 535: return DOTA_UM_StatsMatchDetails;
        case 536: return DOTA_UM_MiniTaunt;
        case 537: return DOTA_UM_BuyBackStateAlert;
        case 538: return DOTA_UM_SpeechBubble;
        case 539: return DOTA_UM_CustomHeaderMessage;
        case 540: return DOTA_UM_QuickBuyAlert;
        case 541: return DOTA_UM_StatsHeroDetails;
        case 542: return DOTA_UM_PredictionResult;
        case 543: return DOTA_UM_ModifierAlert;
        case 544: return DOTA_UM_HPManaAlert;
        case 545: return DOTA_UM_GlyphAlert;
        case 546: return DOTA_UM_BeastChat;
        case 547: return DOTA_UM_SpectatorPlayerUnitOrders;
        case 548: return DOTA_UM_CustomHudElement_Create;
        case 549: return DOTA_UM_CustomHudElement_Modify;
        case 550: return DOTA_UM_CustomHudElement_Destroy;
        case 551: return DOTA_UM_CompendiumState;
        case 552: return DOTA_UM_ProjectionAbility;
        case 553: return DOTA_UM_ProjectionEvent;
        case 554: return DOTA_UM_CombatLogDataHLTV;
        case 555: return DOTA_UM_XPAlert;
        case 556: return DOTA_UM_UpdateQuestProgress;
        case 557: return DOTA_UM_MatchMetadata;
        case 558: return DOTA_UM_MatchDetails;
        case 559: return DOTA_UM_QuestStatus;
        case 560: return DOTA_UM_SuggestHeroPick;
        case 561: return DOTA_UM_SuggestHeroRole;
        case 562: return DOTA_UM_KillcamDamageTaken;
        case 563: return DOTA_UM_SelectPenaltyGold;
        case 564: return DOTA_UM_RollDiceResult;
        case 565: return DOTA_UM_FlipCoinResult;
        case 566: return DOTA_UM_RequestItemSuggestions;
        case 567: return DOTA_UM_TeamCaptainChanged;
        case 568: return DOTA_UM_SendRoshanSpectatorPhase;
        case 569: return DOTA_UM_ChatWheelCooldown;
        case 570: return DOTA_UM_DismissAllStatPopups;
        case 571: return DOTA_UM_TE_DestroyProjectile;
        case 572: return DOTA_UM_HeroRelicProgress;
        case 573: return DOTA_UM_AbilityDraftRequestAbility;
        case 574: return DOTA_UM_ItemSold;
        case 575: return DOTA_UM_DamageReport;
        case 576: return DOTA_UM_SalutePlayer;
        case 577: return DOTA_UM_TipAlert;
        case 578: return DOTA_UM_ReplaceQueryUnit;
        case 579: return DOTA_UM_EmptyTeleportAlert;
        case 580: return DOTA_UM_MarsArenaOfBloodAttack;
        case 581: return DOTA_UM_ESArcanaCombo;
        case 582: return DOTA_UM_ESArcanaComboSummary;
        case 583: return DOTA_UM_HighFiveLeftHanging;
        case 584: return DOTA_UM_HighFiveCompleted;
        case 585: return DOTA_UM_ShovelUnearth;
        case 586: return DOTA_EM_InvokerSpellCast;
        case 587: return DOTA_UM_RadarAlert;
        case 588: return DOTA_UM_AllStarEvent;
        case 589: return DOTA_UM_TalentTreeAlert;
        case 590: return DOTA_UM_QueuedOrderRemoved;
        case 591: return DOTA_UM_DebugChallenge;
        case 592: return DOTA_UM_OMArcanaCombo;
        case 593: return DOTA_UM_FoundNeutralItem;
        case 594: return DOTA_UM_OutpostCaptured;
        case 595: return DOTA_UM_OutpostGrantedXP;
        case 596: return DOTA_UM_MoveCameraToUnit;
        case 597: return DOTA_UM_PauseMinigameData;
        case 598: return DOTA_UM_VersusScene_PlayerBehavior;
        case 600: return DOTA_UM_QoP_ArcanaSummary;
        case 601: return DOTA_UM_HotPotato_Created;
        case 602: return DOTA_UM_HotPotato_Exploded;
        case 603: return DOTA_UM_WK_Arcana_Progress;
        case 604: return DOTA_UM_GuildChallenge_Progress;
        case 605: return DOTA_UM_WRArcanaProgress;
        case 606: return DOTA_UM_WRArcanaSummary;
        case 607: return DOTA_UM_EmptyItemSlotAlert;
        case 608: return DOTA_UM_AghsStatusAlert;
        case 609: return DOTA_UM_PingConfirmation;
        case 610: return DOTA_UM_MutedPlayers;
        case 611: return DOTA_UM_ContextualTip;
        case 612: return DOTA_UM_ChatMessage;
        case 613: return DOTA_UM_NeutralCampAlert;
        case 614: return DOTA_UM_RockPaperScissorsStarted;
        case 615: return DOTA_UM_RockPaperScissorsFinished;
        case 616: return DOTA_UM_DuelOpponentKilled;
        case 617: return DOTA_UM_DuelAccepted;
        case 618: return DOTA_UM_DuelRequested;
        case 619: return DOTA_UM_MuertaReleaseEvent_AssignedTargetKilled;
        case 620: return DOTA_UM_PlayerDraftSuggestPick;
        case 621: return DOTA_UM_PlayerDraftPick;
        case 622: return DOTA_UM_UpdateLinearProjectileCPData;
        case 623: return DOTA_UM_GiftPlayer;
        case 624: return DOTA_UM_FacetPing;
        case 625: return DOTA_UM_InnatePing;
        case 626: return DOTA_UM_RoshanTimer;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EDotaUserMessages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EDotaUserMessages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EDotaUserMessages>() {
            public EDotaUserMessages findValueByNumber(int number) {
              return EDotaUserMessages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return skadistats.clarity.wire.dota.s2.proto.DOTAS2MessageId.getDescriptor().getEnumTypes().get(5);
    }

    private static final EDotaUserMessages[] VALUES = values();

    public static EDotaUserMessages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EDotaUserMessages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EDotaUserMessages)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020message_id.proto*\364\002\n\014NET_Messages\022\013\n\007n" +
      "et_NOP\020\000\022\022\n\016net_Disconnect\020\001\022\014\n\010net_File" +
      "\020\002\022\027\n\023net_SplitScreenUser\020\003\022\014\n\010net_Tick\020" +
      "\004\022\021\n\rnet_StringCmd\020\005\022\021\n\rnet_SetConVar\020\006\022" +
      "\023\n\017net_SignonState\020\007\022\027\n\023net_SpawnGroup_L" +
      "oad\020\010\022!\n\035net_SpawnGroup_ManifestUpdate\020\t" +
      "\022\"\n\036net_SpawnGroup_SetCreationTick\020\013\022\031\n\025" +
      "net_SpawnGroup_Unload\020\014\022 \n\034net_SpawnGrou" +
      "p_LoadCompleted\020\r\022 \n\034net_ReliableMessage" +
      "EndMarker\020\016\022\024\n\020net_DebugOverlay\020\017*\242\003\n\014CL",
      "C_Messages\022\022\n\016clc_ClientInfo\020\024\022\014\n\010clc_Mo" +
      "ve\020\025\022\021\n\rclc_VoiceData\020\026\022\023\n\017clc_BaselineA" +
      "ck\020\027\022\024\n\020clc_ListenEvents\020\030\022\030\n\024clc_Respon" +
      "dCvarValue\020\031\022\024\n\020clc_FileCRCCheck\020\032\022\027\n\023cl" +
      "c_LoadingProgress\020\033\022\032\n\026clc_SplitPlayerCo" +
      "nnect\020\034\022\025\n\021clc_ClientMessage\020\035\022\035\n\031clc_Sp" +
      "litPlayerDisconnect\020\036\022\024\n\020clc_ServerStatu" +
      "s\020\037\022\022\n\016clc_ServerPing\020 \022\024\n\020clc_RequestPa" +
      "use\020!\022\024\n\020clc_CmdKeyValues\020\"\022\031\n\025clc_RconS" +
      "erverDetails\020#\022\022\n\016clc_HltvReplay\020$\022\022\n\016cl",
      "c_Diagnostic\020%*\253\005\n\014SVC_Messages\022\022\n\016svc_S" +
      "erverInfo\020(\022\033\n\027svc_FlattenedSerializer\020)" +
      "\022\021\n\rsvc_ClassInfo\020*\022\020\n\014svc_SetPause\020+\022\031\n" +
      "\025svc_CreateStringTable\020,\022\031\n\025svc_UpdateSt" +
      "ringTable\020-\022\021\n\rsvc_VoiceInit\020.\022\021\n\rsvc_Vo" +
      "iceData\020/\022\r\n\tsvc_Print\0200\022\016\n\nsvc_Sounds\0201" +
      "\022\017\n\013svc_SetView\0202\022\034\n\030svc_ClearAllStringT" +
      "ables\0203\022\024\n\020svc_CmdKeyValues\0204\022\020\n\014svc_BSP" +
      "Decal\0205\022\023\n\017svc_SplitScreen\0206\022\026\n\022svc_Pack" +
      "etEntities\0207\022\020\n\014svc_Prefetch\0208\022\014\n\010svc_Me",
      "nu\0209\022\024\n\020svc_GetCvarValue\020:\022\021\n\rsvc_StopSo" +
      "und\020;\022\020\n\014svc_PeerList\020<\022\026\n\022svc_PacketRel" +
      "iable\020=\022\022\n\016svc_HLTVStatus\020>\022\025\n\021svc_Serve" +
      "rSteamID\020?\022\026\n\022svc_FullFrameSplit\020F\022\031\n\025sv" +
      "c_RconServerDetails\020G\022\023\n\017svc_UserMessage" +
      "\020H\022\022\n\016svc_HltvReplay\020I\022\031\n\025svc_Broadcast_" +
      "Command\020J\022\037\n\033svc_HltvFixupOperatorStatus" +
      "\020K\022\020\n\014svc_UserCmds\020L*\214\n\n\021EBaseUserMessag" +
      "es\022\027\n\023UM_AchievementEvent\020e\022\023\n\017UM_CloseC" +
      "aption\020f\022\031\n\025UM_CloseCaptionDirect\020g\022\027\n\023U",
      "M_CurrentTimescale\020h\022\027\n\023UM_DesiredTimesc" +
      "ale\020i\022\013\n\007UM_Fade\020j\022\020\n\014UM_GameTitle\020k\022\017\n\013" +
      "UM_HintText\020m\022\r\n\tUM_HudMsg\020n\022\016\n\nUM_HudTe" +
      "xt\020o\022\022\n\016UM_KeyHintText\020p\022\022\n\016UM_ColoredTe" +
      "xt\020q\022\023\n\017UM_RequestState\020r\022\017\n\013UM_ResetHUD" +
      "\020s\022\r\n\tUM_Rumble\020t\022\016\n\nUM_SayText\020u\022\017\n\013UM_" +
      "SayText2\020v\022\025\n\021UM_SayTextChannel\020w\022\014\n\010UM_" +
      "Shake\020x\022\017\n\013UM_ShakeDir\020y\022\016\n\nUM_TextMsg\020|" +
      "\022\021\n\rUM_ScreenTilt\020}\022\014\n\010UM_Train\020~\022\017\n\013UM_" +
      "VGUIMenu\020\177\022\021\n\014UM_VoiceMask\020\200\001\022\025\n\020UM_Voic",
      "eSubtitle\020\201\001\022\021\n\014UM_SendAudio\020\202\001\022\022\n\rUM_It" +
      "emPickup\020\203\001\022\022\n\rUM_AmmoDenied\020\204\001\022\026\n\021UM_Cr" +
      "osshairAngle\020\205\001\022\020\n\013UM_ShowMenu\020\206\001\022\022\n\rUM_" +
      "CreditsMsg\020\207\001\022\037\n\032UM_CloseCaptionPlacehol" +
      "der\020\216\001\022\030\n\023UM_CameraTransition\020\217\001\022\026\n\021UM_A" +
      "udioParameter\020\220\001\022\027\n\022UM_ParticleManager\020\221" +
      "\001\022\020\n\013UM_HudError\020\222\001\022\027\n\022UM_CustomGameEven" +
      "t\020\224\001\022\027\n\022UM_AnimGraphUpdate\020\225\001\022\033\n\026UM_Hapt" +
      "icsManagerPulse\020\226\001\022\034\n\027UM_HapticsManagerE" +
      "ffect\020\227\001\022\031\n\024UM_CommandQueueState\020\230\001\022\030\n\023U",
      "M_UpdateCssClasses\020\231\001\022\027\n\022UM_ServerFrameT" +
      "ime\020\232\001\022\034\n\027UM_LagCompensationError\020\233\001\022\030\n\023" +
      "UM_RequestDllStatus\020\234\001\022\031\n\024UM_RequestUtil" +
      "Action\020\235\001\022\032\n\025UM_UtilActionResponse\020\236\001\022\031\n" +
      "\024UM_DllStatusResponse\020\237\001\022\030\n\023UM_RequestIn" +
      "ventory\020\240\001\022\031\n\024UM_InventoryResponse\020\241\001\022\031\n" +
      "\024UM_RequestDiagnostic\020\242\001\022\032\n\025UM_Diagnosti" +
      "cResponse\020\243\001\022\025\n\020UM_ExtraUserData\020\244\001\022\033\n\026U" +
      "M_NotifyResponseFound\020\245\001\022\037\n\032UM_PlayRespo" +
      "nseConditional\020\246\001\022\020\n\013UM_MAX_BASE\020\310\001*\224\001\n\023",
      "EBaseEntityMessages\022\022\n\rEM_PlayJingle\020\210\001\022" +
      "\025\n\020EM_ScreenOverlay\020\211\001\022\027\n\022EM_RemoveAllDe" +
      "cals\020\212\001\022\026\n\021EM_PropagateForce\020\213\001\022\017\n\nEM_Do" +
      "Spark\020\214\001\022\020\n\013EM_FixAngle\020\215\001*\263&\n\021EDotaUser" +
      "Messages\022\037\n\032DOTA_UM_AddUnitToSelection\020\320" +
      "\003\022\030\n\023DOTA_UM_AIDebugLine\020\321\003\022\026\n\021DOTA_UM_C" +
      "hatEvent\020\322\003\022 \n\033DOTA_UM_CombatHeroPositio" +
      "ns\020\323\003\022\032\n\025DOTA_UM_CombatLogData\020\324\003\022\036\n\031DOT" +
      "A_UM_CombatLogBulkData\020\326\003\022#\n\036DOTA_UM_Cre" +
      "ateLinearProjectile\020\327\003\022$\n\037DOTA_UM_Destro",
      "yLinearProjectile\020\330\003\022%\n DOTA_UM_DodgeTra" +
      "ckingProjectiles\020\331\003\022\035\n\030DOTA_UM_GlobalLig" +
      "htColor\020\332\003\022!\n\034DOTA_UM_GlobalLightDirecti" +
      "on\020\333\003\022\033\n\026DOTA_UM_InvalidCommand\020\334\003\022\031\n\024DO" +
      "TA_UM_LocationPing\020\335\003\022\024\n\017DOTA_UM_MapLine" +
      "\020\336\003\022\034\n\027DOTA_UM_MiniKillCamInfo\020\337\003\022\036\n\031DOT" +
      "A_UM_MinimapDebugPoint\020\340\003\022\031\n\024DOTA_UM_Min" +
      "imapEvent\020\341\003\022\035\n\030DOTA_UM_NevermoreRequiem" +
      "\020\342\003\022\032\n\025DOTA_UM_OverheadEvent\020\343\003\022\037\n\032DOTA_" +
      "UM_SetNextAutobuyItem\020\344\003\022\033\n\026DOTA_UM_Shar",
      "edCooldown\020\345\003\022!\n\034DOTA_UM_SpectatorPlayer" +
      "Click\020\346\003\022\034\n\027DOTA_UM_TutorialTipInfo\020\347\003\022\026" +
      "\n\021DOTA_UM_UnitEvent\020\350\003\022\034\n\027DOTA_UM_Partic" +
      "leManager\020\351\003\022\024\n\017DOTA_UM_BotChat\020\352\003\022\025\n\020DO" +
      "TA_UM_HudError\020\353\003\022\032\n\025DOTA_UM_ItemPurchas" +
      "ed\020\354\003\022\021\n\014DOTA_UM_Ping\020\355\003\022\026\n\021DOTA_UM_Item" +
      "Found\020\356\003\022\"\n\035DOTA_UM_CharacterSpeakConcep" +
      "t\020\357\003\022\027\n\022DOTA_UM_SwapVerify\020\360\003\022\026\n\021DOTA_UM" +
      "_WorldLine\020\361\003\022\033\n\026DOTA_UM_TournamentDrop\020" +
      "\362\003\022\026\n\021DOTA_UM_ItemAlert\020\363\003\022\033\n\026DOTA_UM_Ha",
      "lloweenDrops\020\364\003\022\026\n\021DOTA_UM_ChatWheel\020\365\003\022" +
      "\035\n\030DOTA_UM_ReceivedXmasGift\020\366\003\022 \n\033DOTA_U" +
      "M_UpdateSharedContent\020\367\003\022\037\n\032DOTA_UM_Tuto" +
      "rialRequestExp\020\370\003\022 \n\033DOTA_UM_TutorialPin" +
      "gMinimap\020\371\003\022\"\n\035DOTA_UM_GamerulesStateCha" +
      "nged\020\372\003\022\027\n\022DOTA_UM_ShowSurvey\020\373\003\022\031\n\024DOTA" +
      "_UM_TutorialFade\020\374\003\022\035\n\030DOTA_UM_AddQuestL" +
      "ogEntry\020\375\003\022\032\n\025DOTA_UM_SendStatPopup\020\376\003\022\033" +
      "\n\026DOTA_UM_TutorialFinish\020\377\003\022\034\n\027DOTA_UM_S" +
      "endRoshanPopup\020\200\004\022\037\n\032DOTA_UM_SendGeneric",
      "ToolTip\020\201\004\022\032\n\025DOTA_UM_SendFinalGold\020\202\004\022\026" +
      "\n\021DOTA_UM_CustomMsg\020\203\004\022\031\n\024DOTA_UM_CoachH" +
      "UDPing\020\204\004\022\036\n\031DOTA_UM_ClientLoadGridNav\020\205" +
      "\004\022\032\n\025DOTA_UM_TE_Projectile\020\206\004\022\035\n\030DOTA_UM" +
      "_TE_ProjectileLoc\020\207\004\022\037\n\032DOTA_UM_TE_DotaB" +
      "loodImpact\020\210\004\022\035\n\030DOTA_UM_TE_UnitAnimatio" +
      "n\020\211\004\022 \n\033DOTA_UM_TE_UnitAnimationEnd\020\212\004\022\030" +
      "\n\023DOTA_UM_AbilityPing\020\213\004\022\035\n\030DOTA_UM_Show" +
      "GenericPopup\020\214\004\022\026\n\021DOTA_UM_VoteStart\020\215\004\022" +
      "\027\n\022DOTA_UM_VoteUpdate\020\216\004\022\024\n\017DOTA_UM_Vote",
      "End\020\217\004\022\031\n\024DOTA_UM_BoosterState\020\220\004\022\036\n\031DOT" +
      "A_UM_WillPurchaseAlert\020\221\004\022$\n\037DOTA_UM_Tut" +
      "orialMinimapPosition\020\222\004\022\026\n\021DOTA_UM_Playe" +
      "rMMR\020\223\004\022\031\n\024DOTA_UM_AbilitySteal\020\224\004\022\037\n\032DO" +
      "TA_UM_CourierKilledAlert\020\225\004\022\033\n\026DOTA_UM_E" +
      "nemyItemAlert\020\226\004\022\036\n\031DOTA_UM_StatsMatchDe" +
      "tails\020\227\004\022\026\n\021DOTA_UM_MiniTaunt\020\230\004\022\036\n\031DOTA" +
      "_UM_BuyBackStateAlert\020\231\004\022\031\n\024DOTA_UM_Spee" +
      "chBubble\020\232\004\022 \n\033DOTA_UM_CustomHeaderMessa" +
      "ge\020\233\004\022\032\n\025DOTA_UM_QuickBuyAlert\020\234\004\022\035\n\030DOT",
      "A_UM_StatsHeroDetails\020\235\004\022\035\n\030DOTA_UM_Pred" +
      "ictionResult\020\236\004\022\032\n\025DOTA_UM_ModifierAlert" +
      "\020\237\004\022\030\n\023DOTA_UM_HPManaAlert\020\240\004\022\027\n\022DOTA_UM" +
      "_GlyphAlert\020\241\004\022\026\n\021DOTA_UM_BeastChat\020\242\004\022&" +
      "\n!DOTA_UM_SpectatorPlayerUnitOrders\020\243\004\022$" +
      "\n\037DOTA_UM_CustomHudElement_Create\020\244\004\022$\n\037" +
      "DOTA_UM_CustomHudElement_Modify\020\245\004\022%\n DO" +
      "TA_UM_CustomHudElement_Destroy\020\246\004\022\034\n\027DOT" +
      "A_UM_CompendiumState\020\247\004\022\036\n\031DOTA_UM_Proje" +
      "ctionAbility\020\250\004\022\034\n\027DOTA_UM_ProjectionEve",
      "nt\020\251\004\022\036\n\031DOTA_UM_CombatLogDataHLTV\020\252\004\022\024\n" +
      "\017DOTA_UM_XPAlert\020\253\004\022 \n\033DOTA_UM_UpdateQue" +
      "stProgress\020\254\004\022\032\n\025DOTA_UM_MatchMetadata\020\255" +
      "\004\022\031\n\024DOTA_UM_MatchDetails\020\256\004\022\030\n\023DOTA_UM_" +
      "QuestStatus\020\257\004\022\034\n\027DOTA_UM_SuggestHeroPic" +
      "k\020\260\004\022\034\n\027DOTA_UM_SuggestHeroRole\020\261\004\022\037\n\032DO" +
      "TA_UM_KillcamDamageTaken\020\262\004\022\036\n\031DOTA_UM_S" +
      "electPenaltyGold\020\263\004\022\033\n\026DOTA_UM_RollDiceR" +
      "esult\020\264\004\022\033\n\026DOTA_UM_FlipCoinResult\020\265\004\022#\n" +
      "\036DOTA_UM_RequestItemSuggestions\020\266\004\022\037\n\032DO",
      "TA_UM_TeamCaptainChanged\020\267\004\022%\n DOTA_UM_S" +
      "endRoshanSpectatorPhase\020\270\004\022\036\n\031DOTA_UM_Ch" +
      "atWheelCooldown\020\271\004\022!\n\034DOTA_UM_DismissAll" +
      "StatPopups\020\272\004\022!\n\034DOTA_UM_TE_DestroyProje" +
      "ctile\020\273\004\022\036\n\031DOTA_UM_HeroRelicProgress\020\274\004" +
      "\022\'\n\"DOTA_UM_AbilityDraftRequestAbility\020\275" +
      "\004\022\025\n\020DOTA_UM_ItemSold\020\276\004\022\031\n\024DOTA_UM_Dama" +
      "geReport\020\277\004\022\031\n\024DOTA_UM_SalutePlayer\020\300\004\022\025" +
      "\n\020DOTA_UM_TipAlert\020\301\004\022\035\n\030DOTA_UM_Replace" +
      "QueryUnit\020\302\004\022\037\n\032DOTA_UM_EmptyTeleportAle",
      "rt\020\303\004\022#\n\036DOTA_UM_MarsArenaOfBloodAttack\020" +
      "\304\004\022\032\n\025DOTA_UM_ESArcanaCombo\020\305\004\022!\n\034DOTA_U" +
      "M_ESArcanaComboSummary\020\306\004\022 \n\033DOTA_UM_Hig" +
      "hFiveLeftHanging\020\307\004\022\036\n\031DOTA_UM_HighFiveC" +
      "ompleted\020\310\004\022\032\n\025DOTA_UM_ShovelUnearth\020\311\004\022" +
      "\035\n\030DOTA_EM_InvokerSpellCast\020\312\004\022\027\n\022DOTA_U" +
      "M_RadarAlert\020\313\004\022\031\n\024DOTA_UM_AllStarEvent\020" +
      "\314\004\022\034\n\027DOTA_UM_TalentTreeAlert\020\315\004\022\037\n\032DOTA" +
      "_UM_QueuedOrderRemoved\020\316\004\022\033\n\026DOTA_UM_Deb" +
      "ugChallenge\020\317\004\022\032\n\025DOTA_UM_OMArcanaCombo\020",
      "\320\004\022\035\n\030DOTA_UM_FoundNeutralItem\020\321\004\022\034\n\027DOT" +
      "A_UM_OutpostCaptured\020\322\004\022\035\n\030DOTA_UM_Outpo" +
      "stGrantedXP\020\323\004\022\035\n\030DOTA_UM_MoveCameraToUn" +
      "it\020\324\004\022\036\n\031DOTA_UM_PauseMinigameData\020\325\004\022\'\n" +
      "\"DOTA_UM_VersusScene_PlayerBehavior\020\326\004\022\036" +
      "\n\031DOTA_UM_QoP_ArcanaSummary\020\330\004\022\036\n\031DOTA_U" +
      "M_HotPotato_Created\020\331\004\022\037\n\032DOTA_UM_HotPot" +
      "ato_Exploded\020\332\004\022\037\n\032DOTA_UM_WK_Arcana_Pro" +
      "gress\020\333\004\022$\n\037DOTA_UM_GuildChallenge_Progr" +
      "ess\020\334\004\022\035\n\030DOTA_UM_WRArcanaProgress\020\335\004\022\034\n",
      "\027DOTA_UM_WRArcanaSummary\020\336\004\022\037\n\032DOTA_UM_E" +
      "mptyItemSlotAlert\020\337\004\022\034\n\027DOTA_UM_AghsStat" +
      "usAlert\020\340\004\022\035\n\030DOTA_UM_PingConfirmation\020\341" +
      "\004\022\031\n\024DOTA_UM_MutedPlayers\020\342\004\022\032\n\025DOTA_UM_" +
      "ContextualTip\020\343\004\022\030\n\023DOTA_UM_ChatMessage\020" +
      "\344\004\022\035\n\030DOTA_UM_NeutralCampAlert\020\345\004\022%\n DOT" +
      "A_UM_RockPaperScissorsStarted\020\346\004\022&\n!DOTA" +
      "_UM_RockPaperScissorsFinished\020\347\004\022\037\n\032DOTA" +
      "_UM_DuelOpponentKilled\020\350\004\022\031\n\024DOTA_UM_Due" +
      "lAccepted\020\351\004\022\032\n\025DOTA_UM_DuelRequested\020\352\004",
      "\0224\n/DOTA_UM_MuertaReleaseEvent_AssignedT" +
      "argetKilled\020\353\004\022#\n\036DOTA_UM_PlayerDraftSug" +
      "gestPick\020\354\004\022\034\n\027DOTA_UM_PlayerDraftPick\020\355" +
      "\004\022)\n$DOTA_UM_UpdateLinearProjectileCPDat" +
      "a\020\356\004\022\027\n\022DOTA_UM_GiftPlayer\020\357\004\022\026\n\021DOTA_UM" +
      "_FacetPing\020\360\004\022\027\n\022DOTA_UM_InnatePing\020\361\004\022\030" +
      "\n\023DOTA_UM_RoshanTimer\020\362\004B8\n%skadistats.c" +
      "larity.wire.dota.s2.protoB\017DOTAS2Message" +
      "Id"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
